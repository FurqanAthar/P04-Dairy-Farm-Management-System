[{"C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\index.js":"1","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\store.js":"2","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\App.js":"4","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\reducers\\farmReducer.js":"5","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\reducers\\customerReducer.js":"6","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\pages\\Dashboard.js":"7","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\pages\\BusinessRegistration.js":"8","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\pages\\Animals\\AddAnimal.js":"9","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\pages\\login.js":"10","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\privateRouting\\PrivateRoute.js":"11","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\pages\\Animals\\Animals.js":"12","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\pages\\Animals\\Animal.js":"13","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\pages\\settings\\FarmSettings.js":"14","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\pages\\settings\\UserProfile.js":"15","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\pages\\DailyRecord\\AddMilkProduction.js":"16","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\pages\\settings\\AddWorkers.js":"17","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\pages\\settings\\AddMembers.js":"18","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\reducers\\userReducer.js":"19","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\pages\\Customer\\AddCustomer.js":"20","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\pages\\DailyRecord\\MilkProduction.js":"21","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\pages\\Customer\\Customers.js":"22","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\components\\layouts\\Navigation.js":"23","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\components\\layouts\\Slider.js":"24","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\constants\\otherConstants.js":"25","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\constants\\options.js":"26","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\constants\\farmConstants.js":"27","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\constants\\userConstants.js":"28","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\constants\\customerOptions.js":"29","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\constants\\customerConstants.js":"30","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\services\\apiServices.js":"31","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\actions\\userAction.js":"32","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\actions\\farmActions.js":"33","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\actions\\customerAction.js":"34","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\assets\\styledComponents\\selectStyles.js":"35","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\assets\\styledComponents\\tableStyles.js":"36"},{"size":562,"mtime":1642235409843,"results":"37","hashOfConfig":"38"},{"size":1563,"mtime":1642435132000,"results":"39","hashOfConfig":"38"},{"size":375,"mtime":1636225927021,"results":"40","hashOfConfig":"38"},{"size":3507,"mtime":1645211472371,"results":"41","hashOfConfig":"38"},{"size":2780,"mtime":1642434657358,"results":"42","hashOfConfig":"38"},{"size":1864,"mtime":1642428756309,"results":"43","hashOfConfig":"38"},{"size":4497,"mtime":1638886389083,"results":"44","hashOfConfig":"38"},{"size":14842,"mtime":1642089169882,"results":"45","hashOfConfig":"38"},{"size":12284,"mtime":1643099024965,"results":"46","hashOfConfig":"38"},{"size":4479,"mtime":1636384024344,"results":"47","hashOfConfig":"38"},{"size":928,"mtime":1636308033062,"results":"48","hashOfConfig":"38"},{"size":10503,"mtime":1644346107495,"results":"49","hashOfConfig":"38"},{"size":657,"mtime":1642256637055,"results":"50","hashOfConfig":"38"},{"size":4626,"mtime":1642434657356,"results":"51","hashOfConfig":"38"},{"size":15391,"mtime":1644153860215,"results":"52","hashOfConfig":"38"},{"size":9261,"mtime":1644420644936,"results":"53","hashOfConfig":"38"},{"size":15257,"mtime":1642434657354,"results":"54","hashOfConfig":"38"},{"size":11001,"mtime":1642434657352,"results":"55","hashOfConfig":"38"},{"size":2183,"mtime":1642434657359,"results":"56","hashOfConfig":"38"},{"size":13836,"mtime":1644251562782,"results":"57","hashOfConfig":"38"},{"size":12425,"mtime":1644518577496,"results":"58","hashOfConfig":"38"},{"size":9408,"mtime":1642425742575,"results":"59","hashOfConfig":"38"},{"size":10502,"mtime":1644515897469,"results":"60","hashOfConfig":"38"},{"size":1266,"mtime":1636225927018,"results":"61","hashOfConfig":"38"},{"size":51,"mtime":1636308033056,"results":"62","hashOfConfig":"38"},{"size":354,"mtime":1642235409843,"results":"63","hashOfConfig":"38"},{"size":1079,"mtime":1642434657347,"results":"64","hashOfConfig":"38"},{"size":829,"mtime":1642256637055,"results":"65","hashOfConfig":"38"},{"size":133,"mtime":1642361283803,"results":"66","hashOfConfig":"38"},{"size":704,"mtime":1642426861060,"results":"67","hashOfConfig":"38"},{"size":2390,"mtime":1642435545233,"results":"68","hashOfConfig":"38"},{"size":4305,"mtime":1644153860215,"results":"69","hashOfConfig":"38"},{"size":4635,"mtime":1642434657345,"results":"70","hashOfConfig":"38"},{"size":3192,"mtime":1642427056828,"results":"71","hashOfConfig":"38"},{"size":1153,"mtime":1636737945489,"results":"72","hashOfConfig":"38"},{"size":1561,"mtime":1636737945490,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jd6kmr",{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":4,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":6,"source":"113"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":3,"source":"116"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":1,"source":"119"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":1,"source":"122"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":4,"source":"128"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\index.js",[],"C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\store.js",[],"C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\App.js",["165"],"import \"./assets/scss/main.scss\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport BusinessRegistration from \"./pages/BusinessRegistration\";\r\nimport Login from \"./pages/login\";\r\nimport AddAnimal from \"./pages/Animals/AddAnimal\";\r\nimport Animals from \"./pages/Animals/Animals\";\r\nimport Navigation from \"./components/layouts/Navigation\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport Dashboard from \"./pages/Dashboard\";\r\nimport PrivateRoute from \"./privateRouting/PrivateRoute\";\r\nimport FarmSettings from \"./pages/settings/FarmSettings\";\r\nimport UserProfile from \"./pages/settings/UserProfile\";\r\nimport AddMembers from \"./pages/settings/AddMembers\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport Animal from \"./pages/Animals/Animal\";\r\nimport AddMilkProduction from \"./pages/DailyRecord/AddMilkProduction\";\r\nimport AddWorkers from \"./pages/settings/AddWorkers\";\r\n\r\nimport AddCustomer from \"./pages/Customer/AddCustomer\";\r\nimport Customer from \"./pages/Customer/Customers\"\r\nimport MilkProduction from \"./pages/DailyRecord/MilkProduction\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <BrowserRouter>\r\n        <ToastContainer\r\n          position=\"top-right\"\r\n          autoClose={10000}\r\n          hideProgressBar={true}\r\n          newestOnTop={true}\r\n          closeOnClick\r\n          rtl={false}\r\n          pauseOnFocusLoss={false}\r\n          draggable={false}\r\n          pauseOnHover={false}\r\n        />\r\n        <Navigation />\r\n        <Switch>\r\n          <Route exact path=\"/register\">\r\n            <BusinessRegistration />\r\n          </Route>\r\n          <Route exact path=\"/login\">\r\n            <Login />\r\n          </Route>\r\n\r\n          {/* Animals */}\r\n          <PrivateRoute exact path=\"/animals\">\r\n            <Animals />\r\n          </PrivateRoute>\r\n          <PrivateRoute exact path=\"/animals/add\">\r\n            <AddAnimal />\r\n          </PrivateRoute>\r\n          <PrivateRoute exact path=\"/animal/:id\">\r\n            <AddAnimal />\r\n          </PrivateRoute>\r\n\r\n          {/* Daily Record */}\r\n          <PrivateRoute exact path=\"/milk-records\">\r\n            <MilkProduction />\r\n          </PrivateRoute>\r\n          <PrivateRoute exact path=\"/milk-records/add\">\r\n            <AddMilkProduction/>\r\n          </PrivateRoute>\r\n\r\n            {/* Customer*/}\r\n          \r\n            <PrivateRoute exact path=\"/customer\">\r\n            <Customer/>\r\n          </PrivateRoute>\r\n            <PrivateRoute exact path=\"/customer/add\">\r\n            <AddCustomer />\r\n          </PrivateRoute>\r\n          <PrivateRoute exact path=\"/customer/:id\">\r\n            <AddCustomer />\r\n          </PrivateRoute>\r\n         \r\n\r\n\t\t  {/* Team Members and Workers */}\r\n      <PrivateRoute exact path=\"/\">\r\n            <Dashboard />\r\n          </PrivateRoute>\r\n          <PrivateRoute exact path=\"/dashboard\">\r\n            <Dashboard />\r\n          </PrivateRoute>\r\n          <PrivateRoute exact path=\"/farm/settings\">\r\n            <FarmSettings />\r\n          </PrivateRoute>\r\n          <PrivateRoute exact path=\"/farm/settings/addMembers\">\r\n            <AddMembers />\r\n          </PrivateRoute>\r\n          <PrivateRoute exact path=\"/farm/settings/addWorkers\">\r\n            <AddWorkers />\r\n          </PrivateRoute>\r\n          <PrivateRoute exact path=\"/farm/settings/user-profile\">\r\n            <UserProfile />\r\n          </PrivateRoute>\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\reducers\\farmReducer.js",[],"C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\reducers\\customerReducer.js",["166"],"import { combineReducers } from \"redux\";\r\nimport {\r\n    CUSTOMER_ADD_REQUEST,\r\n    CUSTOMER_ADD_FAIL,\r\n    CUSTOMER_ADD_SUCCESS,\r\n    CUSTOMER_ADD_CLEAR,\r\n    CUSTOMERS_SUCCESS,\r\n    CUSTOMERS_REQUEST,\r\n    CUSTOMERS_FAIL,\r\n    CUSTOMERS_CLEAR,\r\n    CUSTOMER_UPDATE_CLEAR,\r\n    CUSTOMER_UPDATE_FAIL,\r\n    CUSTOMER_UPDATE_REQUEST,\r\n    CUSTOMER_UPDATE_SUCCESS\r\n} from \"../constants/customerConstants\";\r\n\r\nconst addCustomerReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case  CUSTOMER_ADD_REQUEST:\r\n      return { loading: true };\r\n    case  CUSTOMER_ADD_SUCCESS:\r\n      return { loading: false, customers: action.payload, success: true };\r\n    case CUSTOMER_ADD_FAIL:\r\n      return { loading: false, error: action.payload, success: false };\r\n    case CUSTOMER_ADD_CLEAR:\r\n      return {};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst customers = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case CUSTOMERS_REQUEST:\r\n      return { loading: true };\r\n    case CUSTOMERS_SUCCESS:\r\n      return { loading: false, customers: action.payload, success: true };\r\n    case CUSTOMERS_FAIL:\r\n      return { loading: false, error: action.payload, success: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst updateCustomerReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case CUSTOMER_UPDATE_REQUEST:\r\n      return { loading: true };\r\n    case CUSTOMER_UPDATE_SUCCESS:\r\n      return { loading: false, customers: action.payload, success: true };\r\n    case CUSTOMER_UPDATE_FAIL:\r\n      return { loading: false, error: action.payload, success: false };\r\n    case CUSTOMER_UPDATE_CLEAR:\r\n      return {};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst customerReducer = combineReducers({\r\n    addCustomerReducer,\r\n    customers,\r\n    updateCustomerReducer,\r\n  });\r\n  \r\n  export default customerReducer;\r\n\r\n  ","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\pages\\Dashboard.js",["167","168","169","170"],"import React, { useEffect,useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getAnimals } from '../actions/farmActions';\r\nimport {Bar} from 'react-chartjs-2'\r\nimport { useSelector} from \"react-redux\";\r\nimport { getMilkProductionRecords } from '../services/apiServices';\r\nimport moment from \"moment\";\r\n// const data1=[\r\n//     {\r\n//         date: '12/11/2021',\r\n//         record: {\r\n//             '1291juasuq77q': {\r\n//                 'morning': 11,\r\n//                 'evening': 13,\r\n//                 'name': 'Raani',\r\n//                 'tag': '001',\r\n//             }\r\n//         }\r\n//     },\r\n//     {\r\n//         date: '13/11/2021',\r\n//         record: {\r\n//             '8921829hsa77q': {\r\n//                 'morning': 31,\r\n//                 'evening': 23,\r\n//                 'name': 'Maharaani',\r\n//                 'tag': '002',\r\n//             }\r\n//         }\r\n//     }\r\n// ]\r\nfunction LineChart(milkrecord){\r\n\r\n  const options = {\r\n    options: {\r\n      scales: {\r\n        y: {\r\n          Title: { text: \"Litres\" },\r\n          title: {\r\n            display: true,\r\n            text: \"litres milk\",\r\n          },\r\n        },\r\n        x: {\r\n          Title: { text: \"Litres\" },\r\n          title: {\r\n            display: true,\r\n            text: \"Date (Month/Day/year))\",\r\n          },\r\n        },\r\n      },\r\n\r\n      responsive: true,\r\n      plugins: {\r\n        legend: {\r\n          position: \"top\",\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: \"Total Milk Production in litres against date\",\r\n        },\r\n      },\r\n    },\r\n  };\r\n    \r\n    console.log(\"inside\",milkrecord.data)\r\n    let l_dates=[]\r\n    let total_morning=[]\r\n    let total_evening=[]\r\n    const print=milkrecord.data? milkrecord.data.milkRecords.forEach(element => {\r\n        console.log(\"printing \",element);\r\n       \r\n        l_dates.push( moment(element.date).format(\"MM/DD/YYYY\"))\r\n        let m=0\r\n        let e=0\r\n        let milkp=Object.keys(element.record).forEach((key) => {\r\n            m=m + element.record[key].morning\r\n            e=e + element.record[key].evening \r\n            \r\n            })\r\n        \r\n        console.log(m)\r\n        total_morning.push(m)\r\n        total_evening.push(e)\r\n        milkp=0\r\n    }):\"\"\r\n    console.log(total_morning)\r\n\r\n\r\n\r\n    const data={\r\n\r\n        labels:l_dates.sort(),\r\n        datasets:[\r\n\r\n            {\r\n                label: \"Morning prod\",\r\n                backgroundColor: \"rgba(255,99,132,0.2)\",\r\n                borderColor: \"rgba(255,99,132,1)\",\r\n                borderWidth: 1,\r\n                //stack: 1,\r\n                hoverBackgroundColor: \"rgba(255,99,132,1)\",\r\n                hoverBorderColor: \"rgba(255,0,132,4)\",\r\n                data: total_morning\r\n              },\r\n    \r\n              {\r\n                label: \"Evening prod\",\r\n                backgroundColor: \"rgba(155,231,91,0.2)\",\r\n                borderColor: \"rgba(255,99,132,1)\",\r\n                borderWidth: 1,\r\n                //stack: 1,\r\n                hoverBackgroundColor: \"rgba(255,0,132,1)\",\r\n                hoverBorderColor: \"rgba(255,0,132,4)\",\r\n                data: total_evening\r\n              }\r\n        ]\r\n\r\n    }\r\n    return <Bar options={options.options} data={data} />;\r\n\r\n}\r\n\r\nfunction Dashboard(props) {\r\n    const [record, setRecord] = useState(\"\")\r\n    useEffect(() => {\r\n      async function getAnimalsData() {\r\n        await props.getAnimals();\r\n        console.log(props.getAnimals())\r\n        let records= await getMilkProductionRecords(props.login.loginInfo.token) \r\n        setRecord(records)\r\n        // console.log(records)\r\n      }\r\n   \r\n\r\n      getAnimalsData();\r\n      \r\n    }, []);\r\n\r\n    // useEffect(() => {\r\n    //   console.log(props.animals)\r\n    //   if (Object.keys(props.animals).length > 0) {\r\n    //     const isInitialized = props.animals.animals.animalsData[0]\r\n    //   }\r\n    // }, [props.animals])\r\n    return (\r\n        <div style={{width:\"720px\"}}>\r\n           \r\n            {/* {console.log(data1)} */}\r\n            {record? <LineChart {...record} />: <p> Waiting for Records </p>}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    \r\n  return {\r\n    getAnimals: (data) => dispatch(getAnimals(data)),\r\n    \r\n  };\r\n \r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        login: state.login,\r\n        animals: state.farm.animals,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\r\n\r\n","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\pages\\BusinessRegistration.js",["171","172","173","174","175","176"],"import React, { useState, useEffect, useReducer } from \"react\";\r\nimport axios from 'axios'\r\nimport {\r\n    Form,\r\n    Button,\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Card,\r\n    FormControl,\r\n    Alert,\r\n} from \"react-bootstrap\";\r\nimport Select from \"react-select\";\r\nimport { useHistory } from \"react-router\";\r\nimport Logo from '../assets/images/logo.jpg'\r\nimport LoginSlider from '../components/layouts/Slider'\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\nimport { toast } from \"react-toastify\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport default function BusinessRegistration(props) {\r\n    const history = useHistory()\r\n    const [, forceUpdate] = useState();\r\n    const [step, setStep] = useState(\"subdomain\");\r\n    const [disabled, setDisabled] = useState(false);\r\n    const [validator] = useState(new SimpleReactValidator());\r\n    const [formInput, setFormInput] = useReducer(\r\n      (state, newState) => ({ ...state, ...newState }),\r\n      {\r\n        farmName: \"\",\r\n        subdomain: \"\",\r\n        first_name: \"\",\r\n        last_name: \"\",\r\n        company_name: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        password_confirmation: \"\",\r\n        cnic: \"\"\r\n      }\r\n    );\r\n\r\n    const handleInput = (evt) => {\r\n      const name = evt.target.name;\r\n      const newValue = evt.target.value;\r\n      setFormInput({ [name]: newValue });\r\n    };\r\n\r\n    const handleCompanySubmit = async (e) => {\r\n        setDisabled(true)\r\n        e.preventDefault()\r\n        if (!validator.allValid()) {\r\n            validator.showMessages();\r\n            forceUpdate(1);\r\n        } else {\r\n            let result = await axios.post('/farm/validate/subdomain', {'subdomain': formInput.subdomain})\r\n            if (result.data && result.data.success) {\r\n                setStep(\"details\")\r\n            } else {\r\n                toast.error(result.data.message)\r\n            }\r\n        }\r\n        setDisabled(false)\r\n    }\r\n\r\n    const handleRegistration = async (e) => {\r\n        e.preventDefault()\r\n        setDisabled(true);\r\n        if (!validator.allValid()) {\r\n            validator.showMessages()\r\n            forceUpdate(1)\r\n        } else {\r\n            if (formInput.password !== formInput.password_confirmation) {\r\n                toast.error(\"Passwords doesn't match\")\r\n            } else {\r\n                let data = {\r\n                    name: formInput.first_name + ' ' + formInput.last_name,\r\n                    email: formInput.email,\r\n                    subdomain: formInput.subdomain,\r\n                    farmName: formInput.farmName,\r\n                    password: formInput.password,\r\n                    cnic: formInput.cnic\r\n                }\r\n                let result = await axios.post('/farm/register', {...data})\r\n                if (result.status != 200 || !result.data.success) {\r\n                  toast.error(result.data.message);\r\n                } else {\r\n                  toast.success(\"Dairy Account Registered\");\r\n                  history.push(\"/login\");\r\n                }\r\n            }\r\n        }\r\n        setDisabled(false)\r\n    }\r\n    \r\n    return (\r\n      <>\r\n        {step == \"subdomain\" ? (\r\n          <div className=\"domain-selection\">\r\n            <Container>\r\n              <Row>\r\n                <Col lg={6}>\r\n                  <form\r\n                    // onSubmit={handleCompanySubmit}\r\n                    noValidate\r\n                    className=\"form h-100\"\r\n                  >\r\n                    <div className=\"login-holder\">\r\n                      <div className=\"logo\">\r\n                        <img\r\n                          src={Logo}\r\n                          alt=\"Qazi Dairies Logo\"\r\n                          onClick={() => {\r\n                            history.push(\"/\");\r\n                          }}\r\n                        />\r\n                      </div>\r\n                      <h2 className=\"title\">Give us your business domain</h2>\r\n                      <p className=\"mb-4\">\r\n                        Make it something clear. <br /> For example, the name of\r\n                        your team or company\r\n                      </p>\r\n                      <Form.Group>\r\n                        <Form.Label>Business Domain</Form.Label>\r\n                        <div className=\"form-holder\">\r\n                          <FormControl\r\n                            required\r\n                            id=\"subdomain\"\r\n                            name=\"subdomain\"\r\n                            value={formInput.subdomain}\r\n                            onChange={handleInput}\r\n                          />\r\n                          <small>. {\"localhost:3000/\"}</small>\r\n                        </div>\r\n                        {validator.message(\r\n                          \"subdomain\",\r\n                          formInput.subdomain,\r\n                          \"required|alpha_num_dash\",\r\n                          {\r\n                            className: \"text-danger\",\r\n                          }\r\n                        )}\r\n                      </Form.Group>\r\n                      <Button\r\n                        type=\"submit\"\r\n                        block\r\n                        variant=\"primary\"\r\n                        disabled={disabled}\r\n                        onClick={handleCompanySubmit}\r\n                      >\r\n                        Continue\r\n                      </Button>\r\n                    </div>\r\n                  </form>\r\n                </Col>\r\n                <Col lg={6}>\r\n                  <LoginSlider />\r\n                </Col>\r\n              </Row>\r\n            </Container>\r\n          </div>\r\n        ) : (\r\n          <div className=\"domain-selection\">\r\n            <Container>\r\n              <Row>\r\n                <Col lg={6}>\r\n                  <form\r\n                    onSubmit={handleRegistration}\r\n                    noValidate\r\n                    className=\"form h-100\"\r\n                  >\r\n                    <div className=\"login-holder\">\r\n                      <div className=\"logo\">\r\n                        <img\r\n                          src={Logo}\r\n                          alt=\"Qazi Dairies Logo\"\r\n                          onClick={() => {\r\n                            history.push(\"/\");\r\n                          }}\r\n                        />\r\n                      </div>\r\n                      {/* {props.error ? <div>{ErrorlistItems}</div> : null} */}\r\n                      <h2 className=\"title\">Tell us about yourself?</h2>\r\n                      <Row>\r\n                        <Col lg={12}>\r\n                          <Form.Group>\r\n                            <Form.Label>Business Name</Form.Label>\r\n                            <FormControl\r\n                              name=\"farmName\"\r\n                              value={formInput.farmName}\r\n                              required\r\n                              id=\"farmName\"\r\n                              placeholder=\"XYZ Dairies\"\r\n                              label=\"Business Name\"\r\n                              autoComplete=\"farmName\"\r\n                              onChange={handleInput}\r\n                            />\r\n                            {validator.message(\r\n                              \"farmName\",\r\n                              formInput.farmName,\r\n                              \"required\",\r\n                              {\r\n                                className: \"text-danger\",\r\n                              }\r\n                            )}\r\n                          </Form.Group>\r\n                        </Col>\r\n                        <Col lg={6}>\r\n                          <Form.Group>\r\n                            <Form.Label>First Name</Form.Label>\r\n                            <FormControl\r\n                              name=\"first_name\"\r\n                              value={formInput.first_name}\r\n                              required\r\n                              id=\"first_name\"\r\n                              placeholder=\"Ali\"\r\n                              label=\"First Name\"\r\n                              autoComplete=\"first_name\"\r\n                              onChange={handleInput}\r\n                            />\r\n                            {validator.message(\r\n                              \"first_name\",\r\n                              formInput.first_name,\r\n                              \"required\",\r\n                              {\r\n                                className: \"text-danger\",\r\n                              }\r\n                            )}\r\n                          </Form.Group>\r\n                        </Col>\r\n                        <Col lg={6}>\r\n                          <Form.Group>\r\n                            <Form.Label>Last Name</Form.Label>\r\n                            <FormControl\r\n                              required\r\n                              id=\"last_name\"\r\n                              label=\"Last Name\"\r\n                              name=\"last_name\"\r\n                              placeholder=\"Gujjer\"\r\n                              value={formInput.last_name}\r\n                              autoComplete=\"last_name\"\r\n                              onChange={handleInput}\r\n                            />\r\n                            {validator.message(\r\n                              \"last_name\",\r\n                              formInput.last_name,\r\n                              \"required\",\r\n                              {\r\n                                className: \"text-danger\",\r\n                              }\r\n                            )}\r\n                          </Form.Group>\r\n                        </Col>\r\n                        <Col lg={12}>\r\n                          <Form.Group>\r\n                            <Form.Label>CNIC</Form.Label>\r\n                            <FormControl\r\n                              required\r\n                              id=\"cnic\"\r\n                              label=\"CNIC\"\r\n                              name=\"cnic\"\r\n                              placeholder=\"3XXXX XXXXXXX X\"\r\n                              value={formInput.cnic}\r\n                              autoComplete=\"cnic\"\r\n                              onChange={handleInput}\r\n                            />\r\n                            {validator.message(\r\n                              \"cnic\",\r\n                              formInput.cnic,\r\n                              \"required\",\r\n                              {\r\n                                className: \"text-danger\",\r\n                              }\r\n                            )}\r\n                          </Form.Group>\r\n                        </Col>\r\n                        <Col lg={12}>\r\n                          <Form.Group>\r\n                            <Form.Label>Email Address</Form.Label>\r\n                            <FormControl\r\n                              required\r\n                              id=\"email\"\r\n                              label=\"Email Address\"\r\n                              name=\"email\"\r\n                              placeholder=\"gujjerali@gmail.com\"\r\n                              value={formInput.email}\r\n                              autoComplete=\"email\"\r\n                              onChange={handleInput}\r\n                            />\r\n                            {validator.message(\r\n                              \"email\",\r\n                              formInput.email,\r\n                              \"required|email\",\r\n                              {\r\n                                className: \"text-danger\",\r\n                              }\r\n                            )}\r\n                          </Form.Group>\r\n                        </Col>\r\n                        <Col lg={12}>\r\n                          <Form.Group>\r\n                            <Form.Label>Create Password</Form.Label>\r\n                            <FormControl\r\n                              required\r\n                              value={formInput.password}\r\n                              name=\"password\"\r\n                              label=\"Password\"\r\n                              type=\"password\"\r\n                              placeholder=\"Min. 8 Character\"\r\n                              id=\"password\"\r\n                              autoComplete=\"password\"\r\n                              onChange={handleInput}\r\n                            />\r\n                            {validator.message(\r\n                              \"password\",\r\n                              formInput.password,\r\n                              \"required\",\r\n                              {\r\n                                className: \"text-danger\",\r\n                              }\r\n                            )}\r\n                          </Form.Group>\r\n                        </Col>\r\n                        <Col lg={12}>\r\n                          <Form.Group>\r\n                            <Form.Label>Confirm Password</Form.Label>\r\n                            <FormControl\r\n                              required\r\n                              value={formInput.password_confirmation}\r\n                              name=\"password_confirmation\"\r\n                              label=\"Confirm Password\"\r\n                              type=\"password\"\r\n                              placeholder=\"Min. 8 Character\"\r\n                              id=\"password_confirmation\"\r\n                              autoComplete=\"password_confirmation\"\r\n                              onChange={handleInput}\r\n                            />\r\n                            {validator.message(\r\n                              \"password_confirmation\",\r\n                              formInput.password_confirmation,\r\n                              \"required\",\r\n                              { className: \"text-danger\" }\r\n                            )}\r\n                          </Form.Group>\r\n                        </Col>\r\n                        <Col lg={12}>\r\n                          <Button\r\n                            type=\"submit\"\r\n                            block\r\n                            variant=\"primary\"\r\n                            className=\"mt-3\"\r\n                            disabled={disabled}\r\n                          >\r\n                            Continue\r\n                          </Button>\r\n                        </Col>\r\n                      </Row>\r\n                      <div className=\"login-option\">\r\n                        Already have an account?{\" \"}\r\n                        <NavLink to=\"/signin\">Log In</NavLink>\r\n                      </div>\r\n                    </div>\r\n                  </form>\r\n                </Col>\r\n                <Col lg={6}>\r\n                  <LoginSlider />\r\n                </Col>\r\n              </Row>\r\n            </Container>\r\n          </div>\r\n        )}\r\n      </>\r\n    );\r\n}","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\pages\\Animals\\AddAnimal.js",["177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192"],"import React, { useState, useEffect, useReducer } from \"react\";\r\nimport {\r\n  Form,\r\n  Button,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  InputGroup,\r\n  FormControl,\r\n} from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\nimport Select from \"react-select\";\r\nimport { connect } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useParams } from \"react-router\";\r\nimport { useHistory } from \"react-router\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { addAnimal, updateAnimal } from \"../../actions/farmActions\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\nimport chevLeft from \"../../assets/images/icons/cheveron-left.svg\";\r\nimport axios from \"axios\";\r\nimport { getAnimalData } from \"../../services/apiServices\";\r\n\r\nconst customRoleControlStyles = {\r\n  control: (base, state) => ({\r\n    ...base,\r\n    minHeight: 50,\r\n    background: state.isFocused ? \"#fff\" : \"#fff\",\r\n    borderWidth: 1,\r\n    borderRadius: \"8px\",\r\n    borderColor: state.isFocused ? \"#28a745\" : \"#E5E8F5\",\r\n    boxShadow: state.isFocused ? null : null,\r\n    fontSize: \"12px\",\r\n    \"&:hover\": {\r\n      borderColor: state.isFocused ? \"#28a745\" : null,\r\n    },\r\n  }),\r\n  dropdownIndicator: (base) => ({\r\n    ...base,\r\n    paddingTop: 0,\r\n    paddingBottom: 0,\r\n    marginRight: \"5px\",\r\n  }),\r\n  menu: (base) => ({\r\n    ...base,\r\n    fontSize: \"13px\",\r\n    border: \"1px solid #f1f3f6\",\r\n    boxShadow: \"none\",\r\n  }),\r\n  option: (base, state) => ({\r\n    ...base,\r\n    background: state.isSelected ? \"#f1f3f6\" : \"#fff\",\r\n    color: \"#151B26\",\r\n    \"&:hover\": {\r\n      background: \"#f1f3f6\",\r\n      color: \"#151B26\",\r\n    },\r\n  }),\r\n  placeholder: (base) => ({\r\n    ...base,\r\n    color: \"#A8B9CD\",\r\n  }),\r\n  clearIndicator: (base) => ({\r\n    ...base,\r\n    paddingTop: 0,\r\n    paddingBottom: 0,\r\n  }),\r\n  indicatorSeparator: (base) => ({\r\n    ...base,\r\n    display: \"none\",\r\n  }),\r\n};\r\n\r\nfunction AddAnimal(props) {\r\n  const { id } = useParams();\r\n  console.log({id},\"id is :\")\r\n  const history = useHistory();\r\n  const [image, setImage] = useState(\"\");\r\n  const [disabled, setDisabled] = useState(false);\r\n  const [uploading, setUploading] = useState(false);\r\n  const [validator] = useState(new SimpleReactValidator());\r\n  const [formInput, setFormInput] = useReducer(\r\n    (state, newState) => ({ ...state, ...newState }),\r\n    {\r\n      name: \"\",\r\n      tag: \"\",\r\n      dob: \"\",\r\n      type: \"\",\r\n      status: \"\",\r\n      image: \"\",\r\n    }\r\n  );\r\n\r\n  useEffect(async () => {\r\n    if (id !== undefined && props.login.loginInfo) {\r\n      console.log(id);\r\n      async function getDetails() {\r\n        console.log(props.login.loginInfo.token);\r\n        return await getAnimalData(id, props.login.loginInfo.token);\r\n      }\r\n      let result = await getDetails();\r\n      if (result.data.success) {\r\n        let d = result.data.details;\r\n        setFormInput({\r\n          name: d.name,\r\n          tag: d.tag,\r\n          dob: new Date(d.dob),\r\n          type: d.type,\r\n          status: d.status,\r\n          image: d.image,\r\n        });\r\n        setImage(d.image);\r\n      } else {\r\n        toast.error(result.data.message);\r\n      }\r\n    }\r\n  }, [id, props.login]);\r\n\r\n  const types = [\r\n    { label: \"Cow\", value: \"Cow\" },\r\n    { label: \"Heifer\", value: \"Heifer\" },\r\n    { label: \"Child\", value: \"Child\" },\r\n  ];\r\n  const statuses = [\r\n    { label: \"Milking\", value: \"Milking\" },\r\n    { label: \"Not Milking\", value: \"Not Milking\" },\r\n    { label: \"Dead\", value: \"Dead\" },\r\n    { label: \"Sold\", value: \"Sold\" },\r\n  ];\r\n\r\n  const handleInput = (evt) => {\r\n    const name = evt.target.name;\r\n    const newValue = evt.target.value;\r\n    setFormInput({ [name]: newValue });\r\n  };\r\n\r\n  const handleSelect = (e, which) => {\r\n    if (which == \"type\") {\r\n      setFormInput({ [\"type\"]: e.value });\r\n    } else if (which == \"status\") {\r\n      setFormInput({ [\"status\"]: e.value });\r\n    } else if (which == \"date\") {\r\n      setFormInput({ [\"dob\"]: e });\r\n    }\r\n  };\r\n\r\n  const handleAnimalImage = async (e) => {\r\n    const file = e.target.files[0];\r\n    const formData = new FormData();\r\n    formData.append(\"image\", file);\r\n    setUploading(true);\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\"/upload\", formData, config);\r\n\r\n      setImage(data);\r\n      setFormInput({ [\"image\"]: data });\r\n      setUploading(false);\r\n    } catch (error) {\r\n      toast.error(\"Image Upload Failed\");\r\n      setUploading(false);\r\n    }\r\n  };\r\n\r\n  const handleDatepickerFocus = (e) => {\r\n    e.target.parentNode.parentNode.parentNode.classList.add(\"active\");\r\n  };\r\n  const handleDatepickerBlur = (e) => {\r\n    e.target.parentNode.parentNode.parentNode.classList.remove(\"active\");\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    setDisabled(true);\r\n    await props.addAnimal({ ...formInput });\r\n    setDisabled(false);\r\n  };\r\n\r\n  const handleEdit = async (e) => {\r\n    setDisabled(true);\r\n    await props.updateAnimal({ ...formInput, id: id });\r\n    setDisabled(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!props.addAnimalState.loading) {\r\n      if (props.addAnimalState.success) {\r\n        toast.success(\"Animal Added Successfully!\");\r\n        history.push(\"/animals\");\r\n      } else {\r\n        toast.error(props.addAnimalState.error);\r\n      }\r\n    }\r\n  }, [props.addAnimalState]);\r\n\r\n  useEffect(() => {\r\n    if (!props.updateAnimalState.loading) {\r\n      if (props.updateAnimalState.success) {\r\n        toast.success(\"Animal Updated Successfully!\");\r\n        history.push(\"/animals\");\r\n      } else {\r\n        toast.error(props.updateAnimalState.error);\r\n      }\r\n    }\r\n  }, [props.updateAnimalState]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"add-animal\">\r\n        <div className=\"grey-box\">\r\n          <Container>\r\n            <Row className=\"justify-content-md-center\">\r\n              <Col lg={10}>\r\n                <h2 className=\"title\">\r\n                  <Link to=\"/dashboard\">\r\n                    <img src={chevLeft} alt=\"icon\" />\r\n                  </Link>\r\n                  {id != undefined ? \"Edit Animal\" : \"Add Animal\"}\r\n                </h2>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </div>\r\n        <Container>\r\n          <Row className=\"justify-content-md-center\">\r\n            <Col lg={10}>\r\n              <div className=\"details\">\r\n                <div class=\"personal-info\">\r\n                  <label htmlFor=\"profile_image\">\r\n                    {image ? (\r\n                      <div className=\"user-pic\">\r\n                        <img src={image} alt=\"Image\" />\r\n                      </div>\r\n                    ) : (\r\n                      <>\r\n                        <div class=\"name-spell\">AI</div>\r\n                      </>\r\n                    )}\r\n                  </label>\r\n                  <input\r\n                    type=\"file\"\r\n                    id=\"profile_image\"\r\n                    style={{ display: \"none\" }}\r\n                    disabled={uploading}\r\n                    onChange={handleAnimalImage}\r\n                  />\r\n                  <div class=\"text-details\">\r\n                    <strong>Tag ID: {formInput.tag}</strong>\r\n                    <p>Status: {formInput.status}</p>\r\n                  </div>\r\n                </div>\r\n                <div>\r\n                  <Row className=\"p-3\">\r\n                    <Col lg={6}>\r\n                      <Form.Group>\r\n                        <Form.Label>Name</Form.Label>\r\n                        <FormControl\r\n                          name=\"name\"\r\n                          value={formInput.name}\r\n                          required\r\n                          id=\"name\"\r\n                          placeholder=\"Raani\"\r\n                          label=\"name\"\r\n                          autoComplete=\"name\"\r\n                          onChange={handleInput}\r\n                        />\r\n                        {validator.message(\"name\", formInput.name, \"required\", {\r\n                          className: \"text-danger\",\r\n                        })}\r\n                      </Form.Group>\r\n                    </Col>\r\n                    <Col lg={6} className=\"\">\r\n                      <Form.Group className=\"datepicker\">\r\n                        <Form.Label>Date of Birth:</Form.Label>\r\n                        <InputGroup className={\"input-group\"}>\r\n                          <DatePicker\r\n                            selected={formInput.dob}\r\n                            isClearable={true}\r\n                            className=\"datepicker-form-control\"\r\n                            onChange={(date, e) => handleSelect(date, \"date\")}\r\n                            onFocus={handleDatepickerFocus}\r\n                            onBlur={handleDatepickerBlur}\r\n                          />\r\n                          {/* <InputGroup.Append> */}\r\n                          <InputGroup.Text>\r\n                            <span className=\"icon\"></span>\r\n                          </InputGroup.Text>\r\n                          {/* </InputGroup.Append> */}\r\n                        </InputGroup>\r\n                      </Form.Group>\r\n                    </Col>\r\n\r\n                    <Col lg={6}>\r\n                      <Form.Label>Type</Form.Label>\r\n                      <Select\r\n                        className=\"select-menu\"\r\n                        options={types}\r\n                        styles={customRoleControlStyles}\r\n                        value={{\r\n                          label: formInput.type,\r\n                          value: formInput.type,\r\n                        }}\r\n                        name=\"type\"\r\n                        onChange={(e) => {\r\n                          handleSelect(e, \"type\");\r\n                        }}\r\n                      />\r\n                    </Col>\r\n                    <Col lg={6}>\r\n                      <Form.Label>Status</Form.Label>\r\n                      <Select\r\n                        className=\"status\"\r\n                        options={statuses}\r\n                        styles={customRoleControlStyles}\r\n                        value={{\r\n                          label: formInput.status,\r\n                          value: formInput.status,\r\n                        }}\r\n                        name=\"status\"\r\n                        onChange={(e) => {\r\n                          handleSelect(e, \"status\");\r\n                        }}\r\n                      />\r\n                    </Col>\r\n                    <Col lg={6}>\r\n                      <Form.Group>\r\n                        <Form.Label>Tag</Form.Label>\r\n                        <FormControl\r\n                          name=\"tag\"\r\n                          value={formInput.tag}\r\n                          required\r\n                          id=\"tag\"\r\n                          placeholder=\"009\"\r\n                          label=\"Tag\"\r\n                          autoComplete=\"tag\"\r\n                          onChange={handleInput}\r\n                        />\r\n                        {validator.message(\"tag\", formInput.tag, \"required\", {\r\n                          className: \"text-danger\",\r\n                        })}\r\n                      </Form.Group>\r\n                    </Col>\r\n                    <Col lg={12}>\r\n                      <Button\r\n                        variant=\"primary\"\r\n                        onClick={id != undefined ? handleEdit : handleSubmit}\r\n                        disabled={disabled}\r\n                      >\r\n                        {id != undefined ? \"Update\" : \"Save\"}\r\n                      </Button>\r\n                    </Col>\r\n                  </Row>\r\n                </div>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addAnimal: (data) => dispatch(addAnimal(data)),\r\n    updateAnimal: (data) => dispatch(updateAnimal(data)),\r\n  };\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    login: state.login,\r\n    addAnimalState: state.farm.addAnimalReducer,\r\n    updateAnimalState: state.farm.updateAnimalReducer,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddAnimal);\r\n","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\pages\\login.js",["193","194","195","196","197","198","199","200","201","202"],"import React, { useState, useEffect, useReducer } from \"react\";\r\nimport axios from 'axios'\r\nimport {\r\n    Form,\r\n    Button,\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Card,\r\n    FormControl,\r\n    Alert,\r\n    Image,\r\n} from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { login } from \"../actions/userAction\";\r\nimport loginpage from '../assets/images/loginimg.jpg'\r\nimport { toast } from \"react-toastify\";\r\nimport { useHistory } from \"react-router\";\r\n\r\n\r\nexport default function Login(props) {\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n    \r\n    const [formInput, setFormInput] = useReducer(\r\n      (state, newState) => ({ ...state, ...newState }),\r\n      {\r\n        email: \"\",\r\n        password: \"\"\r\n      }\r\n    );\r\n\r\n    const handleInput = (evt) => {\r\n        const name = evt.target.name;\r\n        const newValue = evt.target.value;\r\n        setFormInput({ [name]: newValue });\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        dispatch(login(formInput.email, formInput.password))\r\n    }\r\n\r\n    const userLogin = useSelector((state) => state.login);\r\n    const { loading, error, loginInfo } = userLogin;\r\n\r\n    useEffect(() => {\r\n        if (userLogin) {\r\n            if (error) {\r\n                toast.error('Invalid Login Details')\r\n            } else if (loading == false) {\r\n              history.push(\"/dashboard\");\r\n            }\r\n        }\r\n    }, [dispatch, userLogin])\r\n\r\n    return (\r\n        <>\r\n             <div className=\"d-flex flex-row\"  style={{width:\"100%\",height:\"100vh\"}} >\r\n\r\n                <div className=\"d-flex center\" style={{width:\"65%\"}}>\r\n                    <Image src={loginpage} align=\"center\"  style={{maxWidth:\"100%\"}}/>\r\n                \r\n                </div>\r\n                <div className=\"d-flex\"   style={{width:\"35%\",alignItems:\"center\",justifyContent:\"center\"}}>\r\n                    \r\n                    <Card  style={{width:\"80%\",height:\"65%\",alignSelf:\"center\",boxShadow:\"none\" }} >\r\n                        <Card.Img/>\r\n                        <Card.Title style={{alignSelf:\"center\",margin:\"10px\" }} >Login</Card.Title>\r\n                       <Card.Body style={{justifyContent:\"start\",fontSize:\"12px\" }}>\r\n                            \r\n                                <Form >\r\n                                    <Form.Group style={{alignSelf:\"start\",justifyContent:\"center\"}}>\r\n                                        <Form.Label > Email address</Form.Label>\r\n                                        <Form.Control type=\"email\"name=\"email\" placeholder=\"Example@email.com\" required onChange={handleInput}\r\n                                        style={{justifyContent:\"start\",fontSize:\"10px\" }} />\r\n\r\n                                    </Form.Group >\r\n                                    <Form.Group style={{alignSelf:\"start\",justifyContent:\"center\",marginTop:\"10px\"}}>\r\n                                        <Form.Label > Password</Form.Label>\r\n                                        <Form.Control type=\"password\" name=\"password\" placeholder=\"Password\" required onChange={handleInput} style={{justifyContent:\"start\",fontSize:\"10px\" }} />\r\n\r\n                                    </Form.Group >\r\n                                   \r\n                                <Button style={{width:\"100%\",marginTop:\"20px\",marginBottom:\"20px\",fontSize:\"12px\"}} variant=\"primary\" type=\"submit\" disabled={loading} onClick={handleSubmit}>Login</Button>\r\n                                    <Form.Text> Forgot your password?{\" \"}\r\n                                     <a   href=\"https://tutorialdeep.com/bootstrap/bootstrap-button/\" >Get help</a>\r\n                                    </Form.Text>\r\n                                 \r\n                                </Form>\r\n                        </Card.Body>\r\n                        <Card.Footer style={{fontSize:\"10px\" }}>\r\n                            <div className=\"d-flex\"   style={{alignItems:\"center\",justifyContent:\"center\",width:\"100%\"}}> \r\n                                 Don't have an account? {\"   \"}\r\n                                \r\n                                <a  style={{marginLeft:\"10px\"}} href=\"https://tutorialdeep.com/bootstrap/bootstrap-button/\" > Sign up</a>\r\n                          \r\n                            </div>\r\n                        </Card.Footer>\r\n                    </Card>\r\n                </div>\r\n            </div>  \r\n        </>\r\n    );\r\n}","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\privateRouting\\PrivateRoute.js",[],"C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\pages\\Animals\\Animals.js",["203","204","205","206","207","208","209","210","211","212","213","214"],"import React, { useEffect, useReducer, useCallback, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getAnimals } from \"../../actions/farmActions\";\r\nimport {\r\n  Container,\r\n  Button,\r\n  Form,\r\n  InputGroup,\r\n  FormControl,\r\n  Nav\r\n} from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\nimport Select from \"react-select\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport {NavLink, useHistory } from \"react-router-dom\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport TrashIcon from \"../../assets/images/icons/trash.svg\";\r\nimport SearchIcon from \"../../assets/images/icons/search.svg\";\r\nimport { filterTableStyles } from \"../../assets/styledComponents/tableStyles\";\r\nimport { filterTableSelectStyles } from \"../../assets/styledComponents/selectStyles\";\r\nimport { deleteAnimal } from \"../../services/apiServices\";\r\nimport { toast } from \"react-toastify\";\r\nimport { animalStatuses, animalTypes } from \"../../constants/options\";\r\nimport PlusIcon from \"../../assets/images/icons/plusicon.svg\";\r\nfunction Animals(props) {\r\n  let history = useHistory();\r\n  const [data, setData] = useState([]);\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const handleAnimalComponent = useCallback((state) => handleRowClick(state));\r\n  const [filters, setFilters] = useReducer(\r\n    (state, newState) => ({ ...state, ...newState }),\r\n    {\r\n      status: \"\",\r\n      type: \"\",\r\n      dob: \"\",\r\n      search: \"\",\r\n    }\r\n  );\r\n\r\n  const handleRowClick = (row) => {\r\n    history.push({\r\n      pathname: `/animal/${row._id}`,\r\n      state: {\r\n        data: row,\r\n      },\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function getAnimalsData() {\r\n      await props.getAnimals();\r\n    }\r\n    getAnimalsData();\r\n  }, []);\r\n  useEffect(() => {\r\n    if (props.animals.animals) {\r\n      setData(props.animals.animals.animalsData);\r\n    }\r\n  }, [props.animals]);\r\n\r\n  const handleDatepickerFocus = (e) => {\r\n    e.target.parentNode.parentNode.parentNode.classList.add(\"active\");\r\n  };\r\n  const handleDatepickerBlur = (e) => {\r\n    e.target.parentNode.parentNode.parentNode.classList.remove(\"active\");\r\n  };\r\n\r\n  // checking if any filter is set or not\r\n  const filtersIsSet = () => {\r\n    let set = false;\r\n    Object.keys(filters).forEach((k, idx) => {\r\n      if (filters[k]) {\r\n        set = true;\r\n      }\r\n    });\r\n    return set;\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      name: \"Tag:\",\r\n      selector: \"tag\",\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Type:\",\r\n      selector: \"type\",\r\n      sortable: true,\r\n      cell: (row) => <div>{row.type}</div>,\r\n    },\r\n    {\r\n      name: \"Name:\",\r\n      selector: \"name\",\r\n      sortable: true,\r\n      cell: (row) => (\r\n        <div className=\"d-flex align-items-center\">\r\n          {row && row.image ? (\r\n            <>\r\n              <div className=\"generic-user-pic\">\r\n                <div className=\"user-pic\">\r\n                  <img src={row.image} alt=\"Image\" />\r\n                </div>\r\n              </div>\r\n              {row.name}\r\n            </>\r\n          ) : row && row.name ? (\r\n            <>\r\n              <div className=\"team-name-short mr-2\">\r\n                {row.name.replace(/[^a-zA-Z-0-9 ]/g, \"\").match(/\\b\\w/g)}\r\n              </div>\r\n              {row.name} {row.name}\r\n            </>\r\n          ) : null}\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      name: \"Date of Birth\",\r\n      selector: \"dob\",\r\n      sortable: true,\r\n      cell: (row) => moment(row.dob).format(\"MM/DD/YYYY\"),\r\n    },\r\n    {\r\n      name: \"Status:\",\r\n      selector: \"status\",\r\n      cell: (row) => (\r\n        <div className=\"d-flex align-items-center w-100 q-status-section justify-content-end\">\r\n          <div\r\n            className={\r\n              row.status === \"Sold\" || row.status === \"Sent to approval\"\r\n                ? \"badge badge-info mr-2\"\r\n                : row.status === \"Dead\"\r\n                ? \"badge badge-danger mr-2\"\r\n                : \"badge badge-success mr-2\"\r\n            }\r\n          >\r\n            {row.status}\r\n          </div>\r\n          <Button\r\n            className=\"btn-icon m-0\"\r\n            variant=\"outline-light\"\r\n            onClick={() => deleteAnimalById(row._id)}\r\n          >\r\n            <img src={TrashIcon} alt=\"Trash Icon\" className=\"icon-black\" />\r\n          </Button>\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const deleteAnimalById = async (id) => {\r\n    let result = await deleteAnimal({ id }, props.login.loginInfo.token);\r\n    if (result.data.success) {\r\n      toast.success(result.data.message);\r\n      props.getAnimals();\r\n    } else {\r\n      toast.error(result.data.message);\r\n    }\r\n  };\r\n\r\n  const handleFilter = (index, e, eTarget = null) => {\r\n    let filtersCopy = filters;\r\n    if (index === \"dob\") {\r\n      filtersCopy[index] = e;\r\n      eTarget.target.closest(\".input-group\").classList.remove(\"active\");\r\n    } else if (index === \"search\") {\r\n      filtersCopy[index] = e.target.value;\r\n    } else {\r\n      if (e) {\r\n        filtersCopy[index] = e.value;\r\n      } else {\r\n        filtersCopy[index] = \"\";\r\n      }\r\n    }\r\n    setFilters({ ...filtersCopy });\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"filters\", filters);\r\n    let dataCopy = data;\r\n    let filteredDataCopy = [];\r\n\r\n    // Filtering based on status\r\n    if (filters.status) {\r\n      dataCopy.forEach((c, idx) => {\r\n        if (c.status == filters.status) {\r\n          filteredDataCopy.push(c);\r\n        }\r\n      });\r\n      dataCopy = [...filteredDataCopy];\r\n      filteredDataCopy = [];\r\n    }\r\n\r\n    if (filters.type) {\r\n      dataCopy.forEach((c, idx) => {\r\n        if (c.type == filters.type) {\r\n          filteredDataCopy.push(c);\r\n        }\r\n      });\r\n      dataCopy = [...filteredDataCopy];\r\n      filteredDataCopy = [];\r\n    }\r\n\r\n    if (filters.dob) {\r\n      dataCopy.forEach((c, idx) => {\r\n        if (\r\n          moment(c.dob).format(\"MM/DD/YYYY\") ==\r\n          moment(filters.dob).format(\"MM/DD/YYYY\")\r\n        ) {\r\n          filteredDataCopy.push(c);\r\n        }\r\n      });\r\n      dataCopy = [...filteredDataCopy];\r\n      filteredDataCopy = [];\r\n    }\r\n\r\n    if (filters.search) {\r\n      let searchField = filters.search.toLowerCase();\r\n      dataCopy.forEach((c, idx) => {\r\n        let check = false;\r\n        if (c.name) {\r\n          if (c.name.toLowerCase().includes(searchField)) {\r\n            check = true;\r\n          }\r\n        }\r\n        if (check) {\r\n          filteredDataCopy.push(c);\r\n        }\r\n      });\r\n      dataCopy = [...filteredDataCopy];\r\n      filteredDataCopy = [];\r\n    }\r\n    setFilteredData([...dataCopy]);\r\n  }, [filters]);\r\n\r\n  const FilterComponent = ({}) => (\r\n    <div className=\"d-flex align-items-center justify-content-between tableHead\">\r\n      <div className=\"table-filters\">\r\n        <Form.Group className=\"mb-0\">\r\n          <Select\r\n            styles={filterTableSelectStyles}\r\n            options={animalStatuses}\r\n            placeholder=\"Status\"\r\n            isClearable={true}\r\n            onChange={(e) => handleFilter(\"status\", e)}\r\n            value={animalStatuses.find((s) => {\r\n              return s.value === filters.status;\r\n            })}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group className=\"mb-0\">\r\n          <Select\r\n            styles={filterTableSelectStyles}\r\n            options={animalTypes}\r\n            placeholder=\"Type\"\r\n            isClearable={true}\r\n            onChange={(e) => handleFilter(\"type\", e)}\r\n            value={animalTypes.find((t) => {\r\n              return t.value === filters.type;\r\n            })}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group className=\"datepicker mb-0\">\r\n          <InputGroup className={\"input-group\"}>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text className=\"\">\r\n                <span className=\"icon\"></span>\r\n              </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <DatePicker\r\n              selected={filters.dob}\r\n              isClearable={true}\r\n              // minDate={new Date()}\r\n              className=\"datepicker-form-control\"\r\n              onChange={(date, e) => handleFilter(\"dob\", date, e)}\r\n              onFocus={handleDatepickerFocus}\r\n              onBlur={handleDatepickerBlur}\r\n            />\r\n          </InputGroup>\r\n        </Form.Group>\r\n      </div>\r\n    \r\n      <Button>\r\n      <Nav.Link\r\n                  as={NavLink}\r\n                  className=\"btn-primary\"\r\n                  eventKey=\"5\"\r\n                  to=\"/animals/add\"\r\n                >\r\n                  <div className=\"icon\">\r\n                    <img src={PlusIcon} alt=\"Icon Image\" />\r\n                    {\"    \"}\r\n                    Add Animal\r\n                  </div>\r\n                  \r\n                  \r\n      </Nav.Link>\r\n      </Button>\r\n      \r\n      <div className=\"table-filters justify-content-end\">\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            autoFocus={true}\r\n            id=\"search_field\"\r\n            name=\"search_field\"\r\n            placeholder=\"Search\"\r\n            value={filters.search}\r\n            onFocus={(e) => e.target.parentNode.classList.add(\"active\")}\r\n            onBlur={(e) => {\r\n              e.target.parentNode.classList.remove(\"active\");\r\n            }}\r\n            onChange={(e) => handleFilter(\"search\", e)}\r\n          />\r\n          <InputGroup.Append>\r\n            <InputGroup.Text>\r\n              <img src={SearchIcon} />\r\n            </InputGroup.Text>\r\n          </InputGroup.Append>\r\n        </InputGroup>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const subHeaderComponentMemo = React.useMemo(() => {\r\n    return <FilterComponent />;\r\n  }, [props.animals.animalsData, filters]);\r\n\r\n  return (\r\n    <div className=\"animals-page mt-4 mb-4\">\r\n      <Container>\r\n        <DataTable\r\n          customStyles={filterTableStyles}\r\n          responsive\r\n          fixedHeader={true}\r\n          columns={columns}\r\n          data={filtersIsSet() ? filteredData : data}\r\n          onRowClicked={handleAnimalComponent}\r\n          subHeader\r\n          subHeaderComponent={subHeaderComponentMemo}\r\n          pagination\r\n          persistTableHead\r\n        />\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getAnimals: (data) => dispatch(getAnimals(data)),\r\n  };\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    login: state.login,\r\n    animals: state.farm.animals,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Animals);\r\n","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\pages\\Animals\\Animal.js",["215","216","217"],"import axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { getAnimalData } from \"../../services/apiServices\";\r\n\r\nfunction Animal(props) {\r\n  const { id } = useParams();\r\n\r\n  useEffect(() => {\r\n    async function getData() {\r\n      await getAnimalData(id, props.login.loginInfo.token);\r\n    }\r\n  }, []);\r\n\r\n  return <div></div>;\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    login: state.login,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Animal);\r\n","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\pages\\settings\\FarmSettings.js",["218","219","220","221","222","223","224"],"import React from 'react'\r\nimport {\r\n  Row,\r\n  Col,\r\n  Container,\r\n  Card,\r\n  Button,\r\n  Modal,\r\n  Form,\r\n  FormControl,\r\n} from \"react-bootstrap\";\r\nimport { connect } from 'react-redux';\r\nimport { Link } from \"react-router-dom\";\r\nimport Select from \"react-select\";\r\nimport BadgeIcon from \"../../assets/images/icons/badge.svg\";\r\n\r\nfunction FarmSettings(props) {\r\n    return (\r\n      <div className=\"settings-page\">\r\n        <Container>\r\n          <Row className=\"justify-content-md-center\">\r\n            <Col lg={10}>\r\n              <h2 className=\"title\">Settings</h2>\r\n              <Row>\r\n                <Col lg={6}>\r\n                  {props.login.loginInfo && props.login.loginInfo.name ? (\r\n                    <Link to=\"/farm/settings/user-profile\">\r\n                      <Card className=\"mb-4\">\r\n                        {props.login.loginInfo.image ? (\r\n                          <div className=\"user-pic\">\r\n                            <img\r\n                              src={props.login.loginInfo.image}\r\n                              alt=\"Image\"\r\n                            />\r\n                          </div>\r\n                        ) : (\r\n                          <div className=\"name-char\">\r\n                            {props.login.loginInfo.name\r\n                              .split(\" \")[0]\r\n                              .charAt(0)\r\n                              .toUpperCase() +\r\n                              props.login.loginInfo.name\r\n                                .split(\" \")[1]\r\n                                .charAt(0)\r\n                                .toUpperCase()}\r\n                          </div>\r\n                        )}\r\n                        <Card.Body>\r\n                          <Card.Title>\r\n                            Account <br /> and Security\r\n                          </Card.Title>\r\n                          <Card.Text>\r\n                            <strong>\r\n                              {props.login.loginInfo.name.split(\" \")[0]}{\" \"}\r\n                              {props.login.loginInfo.name.split(\" \")[1]}\r\n                            </strong>\r\n                            <p className=\"m-0\">{props.login.loginInfo.email}</p>\r\n                          </Card.Text>\r\n                        </Card.Body>\r\n                      </Card>\r\n                    </Link>\r\n                  ) : null}\r\n                </Col>\r\n                <Col lg={6}>\r\n                    <Link to=\"/farm/settings/addMembers\">\r\n                      <Card className=\"mb-4\">\r\n                          <div className=\"name-char\">\r\n                          </div>\r\n                        <Card.Body>\r\n                          <Card.Title>\r\n                            Add Team <br /> Members\r\n                          </Card.Title>\r\n                          {/* <Card.Text>\r\n                            <strong>\r\n                              {props.login.loginInfo.name.split(\" \")[0]}{\" \"}\r\n                              {props.login.loginInfo.name.split(\" \")[1]}\r\n                            </strong>\r\n                            <p className=\"m-0\">{props.login.loginInfo.email}</p>\r\n                          </Card.Text> */}\r\n                        </Card.Body>\r\n                      </Card>\r\n                    </Link>\r\n                </Col>\r\n                <Col lg={6}>\r\n                    <Link to=\"/farm/settings/addWorkers\">\r\n                        <Card className=\"mb-4\">\r\n                            <div className=\"name-char\">\r\n                            </div>\r\n                            <Card.Body>\r\n                                <Card.Title>\r\n                                    Add Workers\r\n                                </Card.Title>\r\n                                {/* <Card.Text>\r\n                                    <strong>\r\n                                    {props.login.loginInfo.name.split(\" \")[0]}{\" \"}\r\n                                    {props.login.loginInfo.name.split(\" \")[1]}\r\n                                    </strong>\r\n                                    <p className=\"m-0\">{props.login.loginInfo.email}</p>\r\n                                </Card.Text> */}\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Link>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n  };\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    login: state.login,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FarmSettings);\r\n","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\pages\\settings\\UserProfile.js",["225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244"],"import React, { useState, useReducer, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  Container,\r\n  Col,\r\n  Row,\r\n  Modal,\r\n  Button,\r\n  Form,\r\n  FormControl,\r\n} from \"react-bootstrap\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Link } from \"react-router-dom\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\nimport UserIcon from \"../../assets/images/icons/user2.svg\";\r\nimport EmailIcon from \"../../assets/images/icons/email.svg\";\r\nimport LockIcon from \"../../assets/images/icons/lock.svg\";\r\nimport AccountModalImage from \"../../assets/images/accountsecuritymodal.jpg\";\r\nimport chevLeft from \"../../assets/images/icons/cheveron-left.svg\";\r\nimport {\r\n  userUpdateImage,\r\n  userUpdateName,\r\n  userUpdatePassword,\r\n} from \"../../actions/userAction\";\r\n\r\nfunction UserProfile(props) {\r\n  const [, forceUpdate] = useState();\r\n  const [show, setShow] = useState(false);\r\n  const [disabled, setDisabled] = useState(false);\r\n  const [step, setStep] = useState(\"change_name\");\r\n  const [uploading, setUploading] = useState(false);\r\n  const [validator] = useState(new SimpleReactValidator());\r\n  const [formInput, setFormInput] = useReducer(\r\n    (state, newState) => ({ ...state, ...newState }),\r\n    {\r\n      first_name: \"\",\r\n      last_name: \"\",\r\n      email: \"\",\r\n      old_password: \"\",\r\n      password: \"\",\r\n      password_confirmation: \"\",\r\n    }\r\n  );\r\n\r\n  const handleShow = async (evt, index) => {\r\n    setStep(index);\r\n    setShow(true);\r\n  };\r\n  const handleClose = () => {\r\n    setShow(false);\r\n  };\r\n\r\n  const handleInput = (evt) => {\r\n    const name = evt.target.name;\r\n    const newValue = evt.target.value;\r\n    setFormInput({ [name]: newValue });\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    setDisabled(true);\r\n    if (!validator.allValid()) {\r\n      validator.showMessages();\r\n      forceUpdate(1);\r\n    } else {\r\n      if (step == \"change_name\") {\r\n        await props.userUpdateName(\r\n          formInput.first_name + \" \" + formInput.last_name\r\n        );\r\n      } else if (step == \"change_password\") {\r\n        if (formInput.password != formInput.password_confirmation) {\r\n          toast.error(\"Passwords doesn't match\");\r\n        } else {\r\n          let passwords = {\r\n            oldPassword: formInput.old_password,\r\n            password: formInput.password,\r\n          };\r\n          await props.userUpdatePassword(passwords);\r\n          setShow(false);\r\n        }\r\n      }\r\n    }\r\n    setDisabled(false);\r\n  };\r\n\r\n  const handleUserImage = async (e) => {\r\n    const file = e.target.files[0];\r\n    const formData = new FormData();\r\n    formData.append(\"image\", file);\r\n    setUploading(true);\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\"/upload\", formData, config);\r\n      if (data) {\r\n        await props.userUpdateImage(data);\r\n      }\r\n      setUploading(false);\r\n    } catch (error) {\r\n      toast.error(\"Image Upload Failed\");\r\n      setUploading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.login && props.login.loginInfo.name) {\r\n      let user = props.login.loginInfo;\r\n      setFormInput({ [\"first_name\"]: user.name.split(\" \")[0] });\r\n      setFormInput({ [\"last_name\"]: user.name.split(\" \")[1] });\r\n      setFormInput({ [\"email\"]: \"\" });\r\n      setFormInput({ [\"old_password\"]: \"\" });\r\n      setFormInput({ [\"password\"]: \"\" });\r\n      setFormInput({ [\"password_confirmation\"]: \"\" });\r\n    }\r\n  }, [props.login]);\r\n\r\n  useEffect(() => {\r\n    console.log(props.updateUserName);\r\n    if (!props.updateUserName.loading) {\r\n      if (Object.keys(props.updateUserName).length > 0) {\r\n        if (props.updateUserName.success) {\r\n          toast.success(\"Profile Updated\");\r\n        } else {\r\n          toast.error(\"Error Occured\");\r\n        }\r\n      }\r\n    }\r\n  }, [props.updateUserName]);\r\n\r\n  useEffect(() => {\r\n    console.log(props.updateUserPassword);\r\n    if (!props.updateUserPassword.loading) {\r\n      if (props.updateUserPassword.success) {\r\n        toast.success(\"Profile Updated\");\r\n      } else {\r\n        toast.error(props.updateUserPassword.message);\r\n      }\r\n    }\r\n  }, [props.updateUserPassword]);\r\n\r\n  useEffect(() => {\r\n    if (!props.updateUserImage.loading) {\r\n      if (props.updateUserImage.success) {\r\n        toast.success(\"Profile Updated\");\r\n      } else {\r\n        toast.error(props.updateUserImage.message);\r\n      }\r\n    }\r\n  }, [props.updateUserImage]);\r\n\r\n  return (\r\n    <div className=\"account-security-page\">\r\n      <div className=\"grey-box\">\r\n        <Container>\r\n          <Row className=\"justify-content-md-center\">\r\n            <Col lg={10}>\r\n              <h2 className=\"title\">\r\n                <Link to=\"/farm/settings\">\r\n                  <img src={chevLeft} alt=\"icon\" />\r\n                </Link>\r\n                Account and Security\r\n              </h2>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n      {props.login.loginInfo && props.login.loginInfo.name ? (\r\n        <div>\r\n          <Container>\r\n            <Row className=\"justify-content-md-center\">\r\n              <Col lg={10}>\r\n                <div className=\"details\">\r\n                  <div class=\"personal-info\">\r\n                    <label htmlFor=\"profile_image\">\r\n                      {props.login.loginInfo.image ? (\r\n                        <div className=\"user-pic\">\r\n                          <img src={props.login.loginInfo.image} alt=\"Image\" />\r\n                        </div>\r\n                      ) : (\r\n                        <>\r\n                          <div class=\"name-spell\">\r\n                            {props.login.loginInfo.name\r\n                              .split(\" \")[0]\r\n                              .charAt(0)\r\n                              .toUpperCase() +\r\n                              props.login.loginInfo.name\r\n                                .split(\" \")[1]\r\n                                .charAt(0)\r\n                                .toUpperCase()}\r\n                          </div>\r\n                        </>\r\n                      )}\r\n                    </label>\r\n                    <input\r\n                      type=\"file\"\r\n                      id=\"profile_image\"\r\n                      style={{ display: \"none\" }}\r\n                      disabled={uploading}\r\n                      onChange={handleUserImage}\r\n                    />\r\n                    <div class=\"text-details\">\r\n                      <strong>\r\n                        {props.login.loginInfo.name.split(\" \")[0]}{\" \"}\r\n                        {props.login.loginInfo.name.split(\" \")[1]}\r\n                      </strong>\r\n                      <p>{props.login.loginInfo.email}</p>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"other-info\">\r\n                    <div className=\"list\">\r\n                      <div className=\"d-flex justify-content-between box\">\r\n                        <div className=\"d-flex align-items-center\">\r\n                          <div className=\"icon\">\r\n                            <img src={UserIcon} alt=\"Icon Image\" />\r\n                          </div>\r\n                          <div className=\"label\">Name</div>\r\n                        </div>\r\n                        <div className=\"d-flex align-items-center\">\r\n                          <div className=\"title\">\r\n                            {props.login.loginInfo.name.split(\" \")[0]}{\" \"}\r\n                            {props.login.loginInfo.name.split(\" \")[1]}\r\n                          </div>\r\n                          <a onClick={(e) => handleShow(e, \"change_name\")}>\r\n                            Change\r\n                          </a>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"list\">\r\n                      <div className=\"d-flex justify-content-between box\">\r\n                        <div className=\"d-flex align-items-center\">\r\n                          <div className=\"icon\">\r\n                            <img src={EmailIcon} alt=\"Icon Image\" />\r\n                          </div>\r\n                          <div className=\"label\">Email</div>\r\n                        </div>\r\n                        <div className=\"d-flex align-items-center\">\r\n                          <div className=\"title\">\r\n                            {props.login.loginInfo.email}\r\n                          </div>\r\n                          <a onClick={(e) => handleShow(e, \"change_email\")}>\r\n                            Change\r\n                          </a>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"list\">\r\n                      <div className=\"d-flex justify-content-between box\">\r\n                        <div className=\"d-flex align-items-center\">\r\n                          <div className=\"icon lock-icon\">\r\n                            <img src={LockIcon} alt=\"Icon Image\" />\r\n                          </div>\r\n                          <div className=\"label\">Password</div>\r\n                        </div>\r\n                        <div className=\"d-flex align-items-center\">\r\n                          <div className=\"title\">************</div>\r\n                          <a onClick={(e) => handleShow(e, \"change_password\")}>\r\n                            Change\r\n                          </a>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n          <Modal\r\n            animation={false}\r\n            className=\"account-settings-modal\"\r\n            size=\"sm\"\r\n            centered\r\n            show={show}\r\n            onHide={handleClose}\r\n          >\r\n            <Modal.Header closeButton></Modal.Header>\r\n            <Modal.Body>\r\n              {step == \"change_name\" ? (\r\n                <div className=\"details\">\r\n                  <div className=\"icon\">\r\n                    <img src={AccountModalImage} alt=\"Big Image\" />\r\n                  </div>\r\n\r\n                  <div className=\"title\">Change Name</div>\r\n                  <Form.Group>\r\n                    <Form.Label>First Name</Form.Label>\r\n                    <FormControl\r\n                      id=\"first_name\"\r\n                      name=\"first_name\"\r\n                      value={formInput.first_name}\r\n                      onChange={handleInput}\r\n                    />\r\n                    {validator.message(\r\n                      \"first_name\",\r\n                      formInput.first_name,\r\n                      \"required\",\r\n                      {\r\n                        className: \"text-danger\",\r\n                      }\r\n                    )}\r\n                  </Form.Group>\r\n                  <Form.Group>\r\n                    <Form.Label>Last Name</Form.Label>\r\n                    <FormControl\r\n                      id=\"last_name\"\r\n                      name=\"last_name\"\r\n                      value={formInput.last_name}\r\n                      onChange={handleInput}\r\n                    />\r\n                    {validator.message(\r\n                      \"last_name\",\r\n                      formInput.last_name,\r\n                      \"required\",\r\n                      {\r\n                        className: \"text-danger\",\r\n                      }\r\n                    )}\r\n                  </Form.Group>\r\n                </div>\r\n              ) : (\r\n                <>\r\n                  {step == \"change_password\" ? (\r\n                    <div className=\"details\">\r\n                      <div className=\"icon\">\r\n                        <img src={AccountModalImage} alt=\"Big Image\" />\r\n                      </div>\r\n                      <div className=\"title\">Change password</div>\r\n                      <Form.Group>\r\n                        <Form.Label>Current Password</Form.Label>\r\n                        <FormControl\r\n                          type=\"password\"\r\n                          id=\"old_password\"\r\n                          name=\"old_password\"\r\n                          value={formInput.old_password}\r\n                          onChange={handleInput}\r\n                        />\r\n                        {validator.message(\r\n                          \"old_password\",\r\n                          formInput.old_password,\r\n                          \"required\",\r\n                          {\r\n                            className: \"text-danger\",\r\n                          }\r\n                        )}\r\n                      </Form.Group>\r\n                      <Form.Group>\r\n                        <Form.Label>New Password</Form.Label>\r\n                        <FormControl\r\n                          type=\"password\"\r\n                          id=\"password\"\r\n                          name=\"password\"\r\n                          value={formInput.password}\r\n                          onChange={handleInput}\r\n                        />\r\n                        {validator.message(\r\n                          \"password\",\r\n                          formInput.password,\r\n                          \"required\",\r\n                          {\r\n                            className: \"text-danger\",\r\n                          }\r\n                        )}\r\n                      </Form.Group>\r\n                      <Form.Group>\r\n                        <Form.Label>Confirm new password</Form.Label>\r\n                        <FormControl\r\n                          type=\"password\"\r\n                          id=\"password_confirmation\"\r\n                          name=\"password_confirmation\"\r\n                          value={formInput.password_confirmation}\r\n                          onChange={handleInput}\r\n                        />\r\n                        {validator.message(\r\n                          \"password_confirmation\",\r\n                          formInput.password_confirmation,\r\n                          \"required\",\r\n                          {\r\n                            className: \"text-danger\",\r\n                          }\r\n                        )}\r\n                      </Form.Group>\r\n                    </div>\r\n                  ) : null}\r\n                </>\r\n              )}\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button variant=\"outline-light\" onClick={handleClose}>\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                variant=\"primary\"\r\n                onClick={handleSubmit}\r\n                disabled={disabled}\r\n              >\r\n                Save\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    userUpdateName: (data) => dispatch(userUpdateName(data)),\r\n    userUpdatePassword: (data) => dispatch(userUpdatePassword(data)),\r\n    userUpdateImage: (data) => dispatch(userUpdateImage(data)),\r\n  };\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    login: state.login,\r\n    updateUserName: state.updateUserName,\r\n    updateUserPassword: state.updateUserPassword,\r\n    updateUserImage: state.updateUserImage,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserProfile);\r\n","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\pages\\DailyRecord\\AddMilkProduction.js",["245","246","247","248","249","250"],"import React, { useEffect, useState, useReducer } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  Form,\r\n  Button,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  InputGroup,\r\n  FormControl,\r\n} from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\nimport { toast } from 'react-toastify'\r\nimport DatePicker from \"react-datepicker\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\nimport chevLeft from \"../../assets/images/icons/cheveron-left.svg\";\r\nimport { addMilkRecord } from '../../services/apiServices';\r\n\r\nconst AddMilkProduction = (props) => {\r\n    let history = useHistory()\r\n    const [, forceUpdate] = useState()\r\n    const [animals, setAnimals] = useState([])\r\n    const [disabled, setDisabled] = useState(false)\r\n    const [validator] = useState(new SimpleReactValidator());\r\n    const [formInput, setFormInput] = useReducer(\r\n      (state, newState) => ({ ...state, ...newState }),\r\n      {\r\n        date: new Date(),\r\n        record: {}\r\n      }\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (props.animals.animals) {\r\n            setAnimals(props.animals.animals.animalsData);\r\n            let data = props.animals.animals.animalsData;\r\n            let record = {}\r\n            data.forEach(d => {\r\n                record = { ...record, [d._id]: { 'morning': 0, 'evening': 0, 'name': d.name, 'tag': d.tag }}\r\n            })\r\n            setFormInput({ ['record']: { ...record }})\r\n        }\r\n    }, [props.animals])\r\n\r\n    const handleRecord = (e, data, time) => {\r\n        setFormInput({\r\n            [\"record\"]: {\r\n            ...formInput.record,\r\n            [data._id]: { ...formInput.record[data._id], [time]: e.target.value},\r\n            },\r\n        });\r\n    }\r\n\r\n    const handleDateSelect = (date) => {\r\n        setFormInput({ ['date']: date})\r\n    }\r\n\r\n    const handleSubmit = async (e) => {\r\n        if (!validator.allValid()) {\r\n            validator.showMessages()\r\n            forceUpdate(1)\r\n        } else {\r\n            let d = moment(formInput.date).format(\"YYYY-MM-DD[T00:00:00.000Z]\");\r\n            let data = { ...formInput }\r\n            data.date = d\r\n            let result = await addMilkRecord(data, props.login.loginInfo.token);\r\n            if (result.status !== 200) {\r\n              toast.error('Record with same date already present')\r\n            } else {\r\n                toast.success('Record Added');\r\n                history.push('/dashboard')\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleDatepickerFocus = (e) => {\r\n        e.target.parentNode.parentNode.parentNode.classList.add(\"active\");\r\n    };\r\n    const handleDatepickerBlur = (e) => {\r\n        e.target.parentNode.parentNode.parentNode.classList.remove(\"active\");\r\n    };\r\n\r\n    // useEffect(() => {\r\n    //     console.log('animals', props.animals)\r\n    // }, [props.animals])\r\n\r\n    return (\r\n      <>\r\n        <div className=\"add-milk-production\">\r\n          <div className=\"grey-box\">\r\n            <Container>\r\n              <Row className=\"justify-content-md-center\">\r\n                <Col\r\n                  lg={10}\r\n                  className=\"d-flex align-items-center justify-content-between\"\r\n                >\r\n                  <h2 className=\"title\">\r\n                    <Link to=\"/dashboard\">\r\n                      <img src={chevLeft} alt=\"icon\" />\r\n                    </Link>\r\n                    Add Milk Record\r\n                  </h2>\r\n                  <Form.Group className=\"datepicker\">\r\n                    <InputGroup className={\"input-group\"}>\r\n                      <DatePicker\r\n                        selected={formInput.date}\r\n                        isClearable={false}\r\n                        className=\"datepicker-form-control\"\r\n                        onChange={(date, e) => handleDateSelect(date)}\r\n                        onFocus={handleDatepickerFocus}\r\n                        onBlur={handleDatepickerBlur}\r\n                      />\r\n                      {/* <InputGroup.Append> */}\r\n                      <InputGroup.Text>\r\n                        <span className=\"icon\"></span>\r\n                      </InputGroup.Text>\r\n                      {/* </InputGroup.Append> */}\r\n                    </InputGroup>\r\n                  </Form.Group>\r\n                </Col>\r\n              </Row>\r\n            </Container>\r\n          </div>\r\n          <Container>\r\n            \r\n            <Row className=\"justify-content-md-center\">\r\n              <Col lg={10}>\r\n                <div className=\"details\">\r\n                  {animals && animals.length > 0 ? (\r\n                    <>\r\n                      {animals.map((a, idx) => {\r\n                        return (\r\n                          <>\r\n                          { a.status === \"Milking\"? (\r\n                          <div key={idx} class=\"personal-info\">\r\n                            <div class=\"personalDetails\">\r\n                              {a.image ? (\r\n                                <div className=\"user-pic\">\r\n                                  <img src={a.image} alt=\"Image\" />\r\n                                </div>\r\n                              ) : (\r\n                                <>\r\n                                  <div class=\"name-spell\">{a.name[0]}</div>\r\n                                </>\r\n                              )}\r\n                              <div class=\"text-details\">\r\n                                <strong>Tag ID: {a.tag}</strong>\r\n                                <p>Status: {a.status}</p>\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"inputBox d-flex justify-content-end align-items-center\">\r\n                              <Form.Group>\r\n                                <text > Morning Production in Litres</text>\r\n                                <FormControl\r\n                                  name={`morning-${idx}`}\r\n                                  value={formInput.record[a._id][\"morning\"]}\r\n                                  required\r\n                                  id={`morning-${idx}`}\r\n                                  placeholder=\"Morning\"\r\n                                  label=\"morning\"\r\n                                  autoComplete=\"morning\"\r\n                                  onChange={(e) => {\r\n                                    handleRecord(e, a, \"morning\");\r\n                                  }}\r\n                                />\r\n                                {validator.message(\r\n                                  `morning-${idx}`,\r\n                                  formInput.record[a._id][\"morning\"],\r\n                                  \"required|numeric\",\r\n                                  {\r\n                                    className: \"text-danger\",\r\n                                  }\r\n                                )}\r\n                              </Form.Group>\r\n                              <Form.Group>\r\n                              <text > Evening Production in Litres</text>\r\n                                <FormControl\r\n                                  name={`evening-${idx}`}\r\n                                  value={formInput.record[a._id][\"evening\"]}\r\n                                  required\r\n                                  id={`evening-${idx}`}\r\n                                  placeholder=\"Evening\"\r\n                                  label=\"evening\"\r\n                                  autoComplete=\"evening\"\r\n                                  onChange={(e) => {\r\n                                    handleRecord(e, a, \"evening\");\r\n                                  }}\r\n                                />\r\n                                {validator.message(\r\n                                  `evening-${idx}`,\r\n                                  formInput.record[a._id][\"evening\"],\r\n                                  \"required|numeric\",\r\n                                  {\r\n                                    className: \"text-danger\",\r\n                                  }\r\n                                )}\r\n                              </Form.Group>\r\n                            </div>\r\n                          </div>\r\n                        \r\n                         ): (\r\n                          \"\"\r\n                        ) }\r\n                        </>\r\n                        );\r\n                      \r\n                      \r\n                      })}\r\n                    </>\r\n                  ) : (\r\n                    <p>No Animal is in Milking State</p>\r\n                  )}\r\n                </div>\r\n              </Col>\r\n              <Col lg={10} className=\"pt-3\">\r\n                <Button\r\n                  variant=\"primary\"\r\n                    onClick={handleSubmit}\r\n                    disabled={disabled}\r\n                >\r\n                  Save\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </div>\r\n      </>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n  };\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    login: state.login,\r\n    animals: state.farm.animals,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddMilkProduction)\r\n","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\pages\\settings\\AddWorkers.js",["251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268"],"import React, { useState, useEffect, useReducer } from \"react\";\r\nimport {\r\n    Col,\r\n    Row,\r\n    Container,\r\n    Modal,\r\n    Button,\r\n    Form,\r\n    FormControl,\r\n} from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\nimport Select from \"react-select\";\r\nimport { connect } from \"react-redux\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\nimport { addTeamMember, deleteTeamMember } from '../../services/apiServices';\r\nimport TrashIcon from \"../../assets/images/icons/trash.svg\";\r\nimport SearchIcon from \"../../assets/images/icons/search.svg\";\r\nimport AccountModalImage from \"../../assets/images/accountsecuritymodal.jpg\";\r\nimport { filterTableStyles } from \"../../assets/styledComponents/tableStyles\";\r\nimport { filterTableSelectStyles } from \"../../assets/styledComponents/selectStyles\";\r\nimport { toast } from \"react-toastify\";\r\nimport { getTeamMembers, getWorkers } from \"../../actions/farmActions\";\r\nimport { addWorker, editWorker } from \"../../services/apiServices\";\r\n\r\nfunction AddWorkers(props) {\r\n    const [, forceUpdate] = useState();\r\n    const [show, setShow] = useState(false);\r\n\tconst [edit, setEdit] = useState(false);\r\n    const [disabled, setDisabled] = useState(false);\r\n\tconst [workerInstance, setWorkerInstance] = useState({});\r\n    const [workers, setWorkers] = useState([]);\r\n    const [validator] = useState(new SimpleReactValidator());\r\n\tconst [formInput, setFormInput] = useReducer((state, newState) => ({ ...state, ...newState }),\r\n\t\t{\r\n\t\t\tname: \"\",\r\n\t\t\tnumber: \"\",\r\n\t\t\twork: \"\",\r\n\t\t\tcnic: \"\",\r\n\t\t\tsalary: 0,\r\n\t\t\tstatus: \"\"\r\n\t\t}\r\n\t);\r\n    \r\n    useEffect(() => {\r\n        getWorkersData();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!props.workers.loading) {\r\n            if (props.workers.success) {\r\n                setWorkers([ ...props.workers.workers ])\r\n            }\r\n        } \r\n    }, [props.workers])\r\n\r\n    const customRoleControlStyles = {\r\n        control: (base, state) => ({\r\n            ...base,\r\n            minHeight: 50,\r\n            background: state.isFocused ? \"#fff\" : \"#fff\",\r\n            borderWidth: 1,\r\n            borderRadius: \"8px\",\r\n            borderColor: state.isFocused ? \"#28a745\" : \"#E5E8F5\",\r\n            boxShadow: state.isFocused ? null : null,\r\n            fontSize: \"12px\",\r\n            \"&:hover\": {\r\n                borderColor: state.isFocused ? \"#28a745\" : null,\r\n            },\r\n        }),\r\n        dropdownIndicator: (base) => ({\r\n            ...base,\r\n            paddingTop: 0,\r\n            paddingBottom: 0,\r\n            marginRight: \"5px\",\r\n        }),\r\n        menu: (base) => ({\r\n            ...base,\r\n            fontSize: \"13px\",\r\n            border: \"1px solid #f1f3f6\",\r\n            boxShadow: \"none\",\r\n        }),\r\n        option: (base, state) => ({\r\n            ...base,\r\n            background: state.isSelected ? \"#f1f3f6\" : \"#fff\",\r\n            color: \"#151B26\",\r\n            \"&:hover\": {\r\n                background: \"#f1f3f6\",\r\n                color: \"#151B26\",\r\n            },\r\n        }),\r\n        placeholder: (base) => ({\r\n            ...base,\r\n            color: \"#A8B9CD\",\r\n        }),\r\n        clearIndicator: (base) => ({\r\n            ...base,\r\n            paddingTop: 0,\r\n            paddingBottom: 0,\r\n        }),\r\n        indicatorSeparator: (base) => ({\r\n            ...base,\r\n            display: \"none\",\r\n        }),\r\n    };\r\n\r\n\tconst status = [\r\n\t\t{ label: \"Active\", value: \"active\" },\r\n\t\t{ label: \"Inactive\", value: \"inactive\" },\r\n\t]\r\n\r\n    const columns = [\r\n        {\r\n            name: \"Name:\",\r\n            selector: \"name\",\r\n            sortable: true,\r\n            cell: (row) => (\r\n                <div className=\"d-flex align-items-center\">\r\n                    {row && row.image ? (\r\n                        <>\r\n                        <div className=\"generic-user-pic\">\r\n                            <div className=\"user-pic\">\r\n                            <img src={row.image} alt=\"Image\" />\r\n                            </div>\r\n                        </div>\r\n                        {row.name}\r\n                        </>\r\n                    ) : row && row.name ? (\r\n                        <>\r\n                        <div className=\"team-name-short mr-2\">\r\n                            {row.name.replace(/[^a-zA-Z-0-9 ]/g, \"\").match(/\\b\\w/g)}\r\n                        </div>\r\n                        {row.name}\r\n                        </>\r\n                    ) : null}\r\n                </div>\r\n            ),\r\n        },\r\n        {\r\n            name: \"Contact Number:\",\r\n            selector: \"number\",\r\n            sortable: true,\r\n            cell: (row) => <div>{row.number}</div>,\r\n        },\r\n        {\r\n            name: \"CNIC\",\r\n            selector: \"cnic\",\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: \"Work Assigned\",\r\n            selector: \"work\",\r\n            sortable: true,\r\n        },\r\n\t\t{\r\n            name: \"Salary\",\r\n            selector: \"salary\",\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: \"Status:\",\r\n            selector: \"status\",\r\n            cell: (row) => (\r\n                    <div\r\n                        className={\r\n                        row.status === \"active\"\r\n                            ? \"badge badge-success mr-2\"\r\n                            : row.status === \"inactive\"\r\n                            ? \"badge badge-danger mr-2\"\r\n                            : \"badge badge-info mr-2\"\r\n                        }\r\n                    >\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\trow.status === \"active\" ? \"Active\" : row.status === \"inactive\" ? \"Inactive\" : \"Idle\"\r\n\t\t\t\t\t\t}\r\n                    </div>\r\n            ),\r\n        },\r\n        {\r\n            name: \"\",\r\n            selector: \"actions\",\r\n            cell: (row) => (\r\n                    row.role != \"admin\" && props.login.loginInfo.role != \"employee\" ? (\r\n                        <Button\r\n                            className=\"btn-icon m-0\"\r\n                            variant=\"outline-light\"\r\n                            onClick={() => { setEdit(true); updateFormInput(row); setShow(true) } }\r\n                        >\r\n                            Edit\r\n                        </Button>\r\n                    ) : null\r\n            )\r\n        }\r\n    ];\r\n\r\n\tasync function getWorkersData() {\r\n\t\tawait props.getWorkers();\r\n\t};\r\n\r\n\tconst handleInput = (evt) => {\r\n\t\tconst name = evt.target.name;\r\n\t\tconst newValue = evt.target.value;\r\n\t\tsetFormInput({ [name]: newValue });\r\n\t};\r\n\r\n\tconst handleSelect = (e) => {\r\n\t\tsetFormInput({ [\"status\"]: e.value });\r\n\t};\r\n\r\n\tasync function updateWorkerInstance(worker) {\r\n\t\tawait setWorkerInstance(workerInstance => ({\r\n\t\t\t...workerInstance,\r\n\t\t\tworker\r\n\t\t}));\r\n\t}\r\n\r\n\tconst updateFormInput = (evt) => {\r\n\t\tsetWorkerInstance(workerInstance => ({\r\n\t\t\t...workerInstance,\r\n\t\t\t...evt\r\n\t\t}));\r\n\t\tsetFormInput({\r\n\t\t\tname: evt.name,\r\n\t\t\tnumber: evt.number,\r\n\t\t\twork: evt.work,\r\n\t\t\tcnic: evt.cnic,\r\n\t\t\tsalary: evt.salary,\r\n\t\t\tstatus: evt.status\r\n\t\t});\r\n\t};\r\n\t\r\n    const handleEditWorker = async () => {\r\n\t\tsetDisabled(true);\r\n\t\tif (!validator.allValid()) {\r\n\t\t\tvalidator.showMessages();\r\n\t\t\tforceUpdate(1);\r\n\t\t} else {\r\n\t\t\tlet worker = workerInstance;\r\n\t\t\tworker.name = formInput.name;\r\n\t\t\tworker.number = formInput.number;\r\n\t\t\tworker.work = formInput.work;\r\n\t\t\tworker.cnic = formInput.cnic;\r\n\t\t\tworker.salary = formInput.salary;\r\n\t\t\tworker.status = formInput.status;\r\n\t\t\tlet result = await editWorker(worker, props.login.loginInfo.token);\r\n\t\t\tif (result.data.success) {\r\n\t\t\t\tsetFormInput({\r\n\t\t\t\t\tname: \"\",\r\n\t\t\t\t\tnumber: \"\",\r\n\t\t\t\t\twork: \"\",\r\n\t\t\t\t\tcnic: \"\",\r\n\t\t\t\t\tsalary: 0,\r\n\t\t\t\t\tstatus: \"\"\r\n\t\t\t\t});\r\n\t\t\t\tgetWorkersData();\r\n\t\t\t\tsetShow(false);\r\n\t\t\t\ttoast.success(result.data.message);\r\n\t\t\t} else {\r\n\t\t\t\ttoast.error(result.data.message);\r\n\t\t\t}\r\n\t\t}\r\n\t\tsetDisabled(false);\r\n    }\r\n\r\n    const handleAddWorker = async () => {\r\n        setDisabled(true);\r\n        if (!validator.allValid()) {\r\n\t\t\tvalidator.showMessages();\r\n\t\t\tforceUpdate(1);\r\n        } else {\r\n\t\t\tlet result = await addWorker(formInput, props.login.loginInfo.token);\r\n\t\t\tif (result.data.success) {\r\n\t\t\t\tsetFormInput({\r\n\t\t\t\t\tname: \"\",\r\n\t\t\t\t\tnumber: \"\",\r\n\t\t\t\t\twork: \"\",\r\n\t\t\t\t\tcnic: \"\",\r\n\t\t\t\t\tsalary: 0,\r\n\t\t\t\t\tstatus: \"\"\r\n\t\t\t\t});\r\n\t\t\t\tsetShow(false)\r\n\t\t\t\tgetWorkersData();\r\n\t\t\t\ttoast.success(result.data.message)\r\n\t\t\t} else {\r\n\t\t\t\ttoast.error(result.data.message)\r\n\t\t\t}\r\n        }\r\n        setDisabled(false);\r\n    };\r\n\r\n    return (\r\n        <div className=\"animals-page mt-4 mb-4\">\r\n            <Container>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div className=\"d-flex mb-4 justify-content-center\">\r\n\t\t\t\t\t\t<h2>\r\n\t\t\t\t\t\t\tWORKERS\r\n\t\t\t\t\t\t</h2>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"d-flex mb-4 justify-content-end\">\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant=\"primary\"\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tsetShow(true);\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tAdd New Worker\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n                <DataTable\r\n                    customStyles={filterTableStyles}\r\n                    responsive\r\n                    fixedHeader={true}\r\n                    columns={columns}\r\n                    data={workers}\r\n                    pagination\r\n                    persistTableHead\r\n                />\r\n\r\n                <Modal\r\n                    animation={false}\r\n                    className=\"account-settings-modal\"\r\n                    size=\"sm\"\r\n                    centered\r\n                    show={show}\r\n                    onHide={() => { setShow(false) }}\r\n                >\r\n                    <Modal.Header\r\n                        closeButton\r\n                        onClick={() => { \r\n\t\t\t\t\t\t\tsetEdit(false); \r\n\t\t\t\t\t\t\tsetShow(false); \r\n\t\t\t\t\t\t\tsetFormInput({\r\n\t\t\t\t\t\t\t\tname: \"\",\r\n\t\t\t\t\t\t\t\tnumber: \"\",\r\n\t\t\t\t\t\t\t\twork: \"\",\r\n\t\t\t\t\t\t\t\tcnic: \"\",\r\n\t\t\t\t\t\t\t\tsalary: 0,\r\n\t\t\t\t\t\t\t\tstatus: \"\"\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tsetWorkerInstance({});\r\n\t\t\t\t\t\t}}\r\n                    ></Modal.Header>\r\n                    <Modal.Body>\r\n                        <div className=\"details\">\r\n                            <div className=\"icon\">\r\n                                <img src={AccountModalImage} alt=\"Icon Image\" />\r\n                            </div>\r\n\r\n                            <div className=\"title\">\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tedit === true ? \"Edit Worker\" : \"Add Worker\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</div>\r\n                            <Form.Group>\r\n                                <Form.Label>Full Name</Form.Label>\r\n                                <FormControl\r\n                                id=\"name\"\r\n                                name=\"name\"\r\n                                value={formInput.name}\r\n                                onChange={handleInput}\r\n                                />\r\n                                {validator.message(\"name\", formInput.name, \"required\", {\r\n                                className: \"text-danger\",\r\n                                })}\r\n                            </Form.Group>\r\n                            <Form.Group>\r\n                                <Form.Label>Contact Number</Form.Label>\r\n                                <FormControl\r\n                                id=\"number\"\r\n                                name=\"number\"\r\n                                value={formInput.number}\r\n                                onChange={handleInput}\r\n                                />\r\n                                {validator.message(\"number\", formInput.number, \"required\", {\r\n                                className: \"text-danger\",\r\n                                })}\r\n                            </Form.Group>\r\n                            <Form.Group>\r\n                                <Form.Label>CNIC</Form.Label>\r\n                                <FormControl\r\n                                id=\"cnic\"\r\n                                name=\"cnic\"\r\n                                value={formInput.cnic}\r\n                                onChange={handleInput}\r\n                                />\r\n                                {validator.message(\"cnic\", formInput.cnic, \"required\", {\r\n                                className: \"text-danger\",\r\n                                })}\r\n                            </Form.Group>\r\n                            <Form.Group>\r\n                                <Form.Label>Work Assigned</Form.Label>\r\n                                <FormControl\r\n                                id=\"work\"\r\n                                name=\"work\"\r\n                                value={formInput.work}\r\n                                onChange={handleInput}\r\n                                />\r\n                                {validator.message(\"work\", formInput.work, \"required\", {\r\n                                className: \"text-danger\",\r\n                                })}\r\n                            </Form.Group>\r\n\t\t\t\t\t\t\t<Form.Group>\r\n                                <Form.Label>Salary</Form.Label>\r\n                                <FormControl\r\n                                id=\"salary\"\r\n                                name=\"salary\"\r\n                                value={formInput.salary}\r\n                                onChange={handleInput}\r\n                                />\r\n                                {validator.message(\"salary\", formInput.salary, \"required\", {\r\n                                className: \"text-danger\",\r\n                                })}\r\n                            </Form.Group>\r\n\t\t\t\t\t\t\t<Form.Label>Status</Form.Label>\r\n\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\tclassName=\"select-menu\"\r\n\t\t\t\t\t\t\t\toptions={status}\r\n\t\t\t\t\t\t\t\tstyles={customRoleControlStyles}\r\n\t\t\t\t\t\t\t\tvalue={{\r\n\t\t\t\t\t\t\t\tlabel: formInput.status,\r\n\t\t\t\t\t\t\t\tvalue: formInput.status,\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tname=\"status\"\r\n\t\t\t\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\t\t\thandleSelect(e);\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n                        </div>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button\r\n                        variant=\"outline-light\"\r\n                        onClick={() => {\r\n                            setShow(false);\r\n\t\t\t\t\t\t\tsetEdit(false);\r\n\t\t\t\t\t\t\tsetFormInput({\r\n\t\t\t\t\t\t\t\tname: \"\",\r\n\t\t\t\t\t\t\t\tnumber: \"\",\r\n\t\t\t\t\t\t\t\twork: \"\",\r\n\t\t\t\t\t\t\t\tcnic: \"\",\r\n\t\t\t\t\t\t\t\tsalary: 0,\r\n\t\t\t\t\t\t\t\tstatus: \"\"\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tsetWorkerInstance({});\r\n                        }}\r\n                        >\r\n                        \tCancel\r\n                        </Button>\r\n                        <Button\r\n                        variant=\"primary\"\r\n                        onClick={\r\n\t\t\t\t\t\t\tedit === true ? handleEditWorker : handleAddWorker\r\n\t\t\t\t\t\t}\r\n                        disabled={disabled}\r\n                        >\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tedit === true ? \"Apply Changes\" : \"Add\"\r\n\t\t\t\t\t\t\t}\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getWorkers: (data) => dispatch(getWorkers(data)),\r\n    };\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        login: state.login,\r\n        workers: state.farm.workers\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddWorkers);\r\n","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\pages\\settings\\AddMembers.js",["269","270","271","272","273","274","275","276","277","278","279","280","281"],"import React, { useState, useEffect, useReducer } from \"react\";\r\nimport {\r\n  Col,\r\n  Row,\r\n  Container,\r\n  Modal,\r\n  Button,\r\n  Form,\r\n  FormControl,\r\n} from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\nimport Select from \"react-select\";\r\nimport { connect } from \"react-redux\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\nimport { addTeamMember, deleteTeamMember } from \"../../services/apiServices\";\r\nimport TrashIcon from \"../../assets/images/icons/trash.svg\";\r\nimport SearchIcon from \"../../assets/images/icons/search.svg\";\r\nimport AccountModalImage from \"../../assets/images/accountsecuritymodal.jpg\";\r\nimport { filterTableStyles } from \"../../assets/styledComponents/tableStyles\";\r\nimport { filterTableSelectStyles } from \"../../assets/styledComponents/selectStyles\";\r\nimport { toast } from \"react-toastify\";\r\nimport { getTeamMembers } from \"../../actions/farmActions\";\r\n\r\nfunction AddMembers(props) {\r\n  const [, forceUpdate] = useState();\r\n  const [show, setShow] = useState(false);\r\n  const [disabled, setDisabled] = useState(false);\r\n  const [teamMembers, setTeamMembers] = useState([]);\r\n  const [validator] = useState(new SimpleReactValidator());\r\n\r\n  useEffect(() => {\r\n    async function getMembersData() {\r\n      await props.getTeamMembers();\r\n    }\r\n    getMembersData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!props.members.loading) {\r\n      if (props.members.success) {\r\n        setTeamMembers([...props.members.members]);\r\n      }\r\n    }\r\n  }, [props.members]);\r\n\r\n  const customRoleControlStyles = {\r\n    control: (base, state) => ({\r\n      ...base,\r\n      minHeight: 50,\r\n      background: state.isFocused ? \"#fff\" : \"#fff\",\r\n      borderWidth: 1,\r\n      borderRadius: \"8px\",\r\n      borderColor: state.isFocused ? \"#28a745\" : \"#E5E8F5\",\r\n      boxShadow: state.isFocused ? null : null,\r\n      fontSize: \"12px\",\r\n      \"&:hover\": {\r\n        borderColor: state.isFocused ? \"#28a745\" : null,\r\n      },\r\n    }),\r\n    dropdownIndicator: (base) => ({\r\n      ...base,\r\n      paddingTop: 0,\r\n      paddingBottom: 0,\r\n      marginRight: \"5px\",\r\n    }),\r\n    menu: (base) => ({\r\n      ...base,\r\n      fontSize: \"13px\",\r\n      border: \"1px solid #f1f3f6\",\r\n      boxShadow: \"none\",\r\n    }),\r\n    option: (base, state) => ({\r\n      ...base,\r\n      background: state.isSelected ? \"#f1f3f6\" : \"#fff\",\r\n      color: \"#151B26\",\r\n      \"&:hover\": {\r\n        background: \"#f1f3f6\",\r\n        color: \"#151B26\",\r\n      },\r\n    }),\r\n    placeholder: (base) => ({\r\n      ...base,\r\n      color: \"#A8B9CD\",\r\n    }),\r\n    clearIndicator: (base) => ({\r\n      ...base,\r\n      paddingTop: 0,\r\n      paddingBottom: 0,\r\n    }),\r\n    indicatorSeparator: (base) => ({\r\n      ...base,\r\n      display: \"none\",\r\n    }),\r\n  };\r\n\r\n  const roles = [\r\n    { label: \"Manager\", value: \"manager\" },\r\n    { label: \"Employee\", value: \"employee\" },\r\n  ];\r\n\r\n  const columns = [\r\n    {\r\n      name: \"Name:\",\r\n      selector: \"name\",\r\n      sortable: true,\r\n      cell: (row) => (\r\n        <div className=\"d-flex align-items-center\">\r\n          {row && row.image ? (\r\n            <>\r\n              <div className=\"generic-user-pic\">\r\n                <div className=\"user-pic\">\r\n                  <img src={row.image} alt=\"Image\" />\r\n                </div>\r\n              </div>\r\n              {row.name}\r\n            </>\r\n          ) : row && row.name ? (\r\n            <>\r\n              <div className=\"team-name-short mr-2\">\r\n                {row.name.replace(/[^a-zA-Z-0-9 ]/g, \"\").match(/\\b\\w/g)}\r\n              </div>\r\n              {row.name}\r\n            </>\r\n          ) : null}\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      name: \"Email:\",\r\n      selector: \"email\",\r\n      sortable: true,\r\n      cell: (row) => <div>{row.email}</div>,\r\n    },\r\n    {\r\n      name: \"CNIC\",\r\n      selector: \"cnic\",\r\n      sortable: true,\r\n      //   cell: (row) => moment(row.dob).format(\"MM/DD/YYYY\"),\r\n    },\r\n    {\r\n      name: \"Role:\",\r\n      selector: \"role\",\r\n      cell: (row) => (\r\n        <div className=\"d-flex align-items-center w-100 q-status-section justify-content-end\">\r\n          <div\r\n            className={\r\n              row.role === \"admin\"\r\n                ? \"badge badge-info mr-2\"\r\n                : row.role === \"employee\"\r\n                ? \"badge badge-danger mr-2\"\r\n                : \"badge badge-success mr-2\"\r\n            }\r\n          >\r\n            {row.role}\r\n          </div>\r\n          {row.role != \"admin\" && props.login.loginInfo.role != \"employee\" ? (\r\n            <Button\r\n              className=\"btn-icon m-0\"\r\n              variant=\"outline-light\"\r\n              onClick={() => deleteMember(row._id)}\r\n            >\r\n              <img src={TrashIcon} alt=\"Trash Icon\" className=\"icon-black\" />\r\n            </Button>\r\n          ) : null}\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const deleteMember = async (id) => {\r\n    let result = await deleteTeamMember({ id }, props.login.loginInfo.token);\r\n    if (result.data.success) {\r\n      async function getMembersData() {\r\n        await props.getTeamMembers();\r\n      }\r\n      getMembersData();\r\n      toast.success(result.data.message);\r\n    } else {\r\n      toast.error(result.data.message);\r\n    }\r\n  };\r\n\r\n  const [formInput, setFormInput] = useReducer(\r\n    (state, newState) => ({ ...state, ...newState }),\r\n    {\r\n      name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      cnic: \"\",\r\n      role: \"\",\r\n    }\r\n  );\r\n\r\n  const handleInput = (evt) => {\r\n    const name = evt.target.name;\r\n    const newValue = evt.target.value;\r\n    setFormInput({ [name]: newValue });\r\n  };\r\n\r\n  const handleSelect = (e) => {\r\n    setFormInput({ [\"role\"]: e.value });\r\n  };\r\n\r\n  const handleAddMember = async () => {\r\n    setDisabled(true);\r\n\r\n    if (!validator.allValid()) {\r\n      validator.showMessages();\r\n      forceUpdate(1);\r\n    } else {\r\n      let result = await addTeamMember(formInput, props.login.loginInfo.token);\r\n      if (result.data.success) {\r\n        setFormInput({\r\n          name: \"\",\r\n          email: \"\",\r\n          password: \"\",\r\n          cnic: \"\",\r\n          role: \"\",\r\n        });\r\n        setShow(false);\r\n        async function getMembersData() {\r\n          await props.getTeamMembers();\r\n        }\r\n        getMembersData();\r\n        toast.success(result.data.message);\r\n      } else {\r\n        toast.error(result.data.message);\r\n      }\r\n    }\r\n\r\n    setDisabled(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"animals-page mt-4 mb-4\">\r\n      <Container>\r\n        <div className=\"d-flex justify-content-end\">\r\n          <Button\r\n            variant=\"primary\"\r\n            onClick={() => {\r\n              setShow(true);\r\n            }}\r\n          >\r\n            Add New Member\r\n          </Button>\r\n        </div>\r\n        <DataTable\r\n          customStyles={filterTableStyles}\r\n          responsive\r\n          fixedHeader={true}\r\n          columns={columns}\r\n          data={teamMembers}\r\n          // onRowClicked={handleAnimalComponent}\r\n          subHeader\r\n          // subHeaderComponent={subHeaderComponentMemo}\r\n          pagination\r\n          persistTableHead\r\n        />\r\n\r\n        <Modal\r\n          animation={false}\r\n          className=\"account-settings-modal\"\r\n          size=\"sm\"\r\n          centered\r\n          show={show}\r\n          onHide={() => {\r\n            setShow(false);\r\n          }}\r\n        >\r\n          <Modal.Header\r\n            closeButton\r\n            onClick={() => {\r\n              setShow(false);\r\n            }}\r\n          ></Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"details\">\r\n              <div className=\"icon\">\r\n                <img src={AccountModalImage} alt=\"Icon Image\" />\r\n              </div>\r\n\r\n              <div className=\"title\">Add Member</div>\r\n              <Form.Group>\r\n                <Form.Label>Full Name</Form.Label>\r\n                <FormControl\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  value={formInput.name}\r\n                  onChange={handleInput}\r\n                />\r\n                {validator.message(\"name\", formInput.name, \"required\", {\r\n                  className: \"text-danger\",\r\n                })}\r\n              </Form.Group>\r\n              <Form.Group>\r\n                <Form.Label>Email</Form.Label>\r\n                <FormControl\r\n                  id=\"email\"\r\n                  name=\"email\"\r\n                  value={formInput.email}\r\n                  onChange={handleInput}\r\n                />\r\n                {validator.message(\"email\", formInput.email, \"required|email\", {\r\n                  className: \"text-danger\",\r\n                })}\r\n              </Form.Group>\r\n              <Form.Group>\r\n                <Form.Label>Password</Form.Label>\r\n                <FormControl\r\n                  id=\"password\"\r\n                  name=\"password\"\r\n                  value={formInput.password}\r\n                  onChange={handleInput}\r\n                />\r\n                {validator.message(\"password\", formInput.password, \"required\", {\r\n                  className: \"text-danger\",\r\n                })}\r\n              </Form.Group>\r\n              <Form.Group>\r\n                <Form.Label>CNIC</Form.Label>\r\n                <FormControl\r\n                  id=\"cnic\"\r\n                  name=\"cnic\"\r\n                  value={formInput.cnic}\r\n                  onChange={handleInput}\r\n                />\r\n                {validator.message(\"cnic\", formInput.cnic, \"required\", {\r\n                  className: \"text-danger\",\r\n                })}\r\n              </Form.Group>\r\n              <Form.Label>Type</Form.Label>\r\n              <Select\r\n                className=\"select-menu\"\r\n                options={roles}\r\n                styles={customRoleControlStyles}\r\n                value={{\r\n                  label: formInput.role,\r\n                  value: formInput.role,\r\n                }}\r\n                name=\"role\"\r\n                onChange={(e) => {\r\n                  handleSelect(e);\r\n                }}\r\n              />\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              variant=\"outline-light\"\r\n              onClick={() => {\r\n                setShow(false);\r\n              }}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              variant=\"primary\"\r\n              onClick={handleAddMember}\r\n              disabled={disabled}\r\n            >\r\n              Add\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getTeamMembers: (data) => dispatch(getTeamMembers(data)),\r\n  };\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    login: state.login,\r\n    members: state.farm.teamMembers,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddMembers);\r\n","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\reducers\\userReducer.js",["282"],"import axios from \"axios\";\r\nimport {\r\n  USER_LOGIN_REQUEST,\r\n  USER_LOGIN_SUCCESS,\r\n  USER_LOGIN_FAIL,\r\n  USER_LOGOUT,\r\n  USER_UPDATENAME_SUCCESS,\r\n  USER_UPDATENAME_REQUEST,\r\n  USER_UPDATENAME_FAIL,\r\n  USER_UPDATEPASSWORD_SUCCESS,\r\n  USER_UPDATEPASSWORD_FAIL,\r\n  USER_UPDATEPASSWORD_REQUEST,\r\n  USER_UPDATEIMAGE_REQUEST,\r\n  USER_UPDATEIMAGE_SUCCESS,\r\n  USER_UPDATEIMAGE_FAIL,\r\n} from \"../constants/userConstants\";\r\n\r\nexport const userLoginReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case USER_LOGIN_REQUEST:\r\n        \treturn { loading: true };\r\n        case USER_LOGIN_SUCCESS:\r\n        \treturn { loading: false, loginInfo: action.payload, success: true };\r\n        case USER_LOGIN_FAIL:\r\n        \treturn { loading: false, error: action.payload, success: false };\r\n        case USER_LOGOUT:\r\n        \treturn {};\r\n        default:\r\n        \treturn state;\r\n    }\r\n};\r\n\r\nexport const userUpdateProfileReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case USER_UPDATENAME_REQUEST:\r\n      return { loading: true };\r\n    case USER_UPDATENAME_SUCCESS:\r\n      return { loading: false, loginInfo: action.payload, success: true };\r\n    case USER_UPDATENAME_FAIL:\r\n      return { loading: false, error: action.payload, success: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const userUpdatePasswordReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case USER_UPDATEPASSWORD_REQUEST:\r\n      return { loading: true };\r\n    case USER_UPDATEPASSWORD_SUCCESS:\r\n      return { loading: false, loginInfo: action.payload, success: true };\r\n    case USER_UPDATEPASSWORD_FAIL:\r\n      return { loading: false, message: action.payload, success: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const userUpdateImageReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case USER_UPDATEIMAGE_REQUEST:\r\n      return { loading: true };\r\n    case USER_UPDATEIMAGE_SUCCESS:\r\n      return { loading: false, loginInfo: action.payload, success: true };\r\n    case USER_UPDATEIMAGE_FAIL:\r\n      return { loading: false, message: action.payload, success: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\pages\\Customer\\AddCustomer.js",["283","284","285","286","287","288","289","290","291","292","293","294","295","296","297"],"import React, { useState, useEffect, useReducer } from \"react\";\r\nimport {\r\n\tForm,\r\n\tButton,\r\n\tContainer,\r\n\tRow,\r\n\tCol,\r\n\tCard,\r\n\tInputGroup,\r\n\tFormControl,\r\n} from \"react-bootstrap\";\r\nimport Select from \"react-select\";\r\nimport { connect } from 'react-redux'\r\nimport { toast } from 'react-toastify'\r\nimport { Link } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { addCustomer,updateCustomer} from \"../../actions/customerAction\";\r\nimport { useParams } from \"react-router\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\nimport chevLeft from \"../../assets/images/icons/cheveron-left.svg\";\r\nimport axios from \"axios\";\r\nimport { getCustomerData } from \"../../services/apiServices\";\r\n\r\n\r\n// need to fix the milk production\r\n// testing for new issue branch and managing conflicts\r\nconst customRoleControlStyles = {\r\n  control: (base, state) => ({\r\n    ...base,\r\n    minHeight: 50,\r\n    background: state.isFocused ? \"#fff\" : \"#fff\",\r\n    borderWidth: 1,\r\n    borderRadius: \"8px\",\r\n    borderColor: state.isFocused ? \"#28a745\" : \"#E5E8F5\",\r\n    boxShadow: state.isFocused ? null : null,\r\n    fontSize: \"12px\",\r\n    \"&:hover\": {\r\n      borderColor: state.isFocused ? \"#28a745\" : null,\r\n    },\r\n  }),\r\n  dropdownIndicator: (base) => ({\r\n    ...base,\r\n    paddingTop: 0,\r\n    paddingBottom: 0,\r\n    marginRight: \"5px\",\r\n  }),\r\n  menu: (base) => ({\r\n    ...base,\r\n    fontSize: \"13px\",\r\n    border: \"1px solid #f1f3f6\",\r\n    boxShadow: \"none\",\r\n  }),\r\n  option: (base, state) => ({\r\n    ...base,\r\n    background: state.isSelected ? \"#f1f3f6\" : \"#fff\",\r\n    color: \"#151B26\",\r\n    \"&:hover\": {\r\n      background: \"#f1f3f6\",\r\n      color: \"#151B26\",\r\n    },\r\n  }),\r\n  placeholder: (base) => ({\r\n    ...base,\r\n    color: \"#A8B9CD\",\r\n  }),\r\n  clearIndicator: (base) => ({\r\n    ...base,\r\n    paddingTop: 0,\r\n    paddingBottom: 0,\r\n  }),\r\n  indicatorSeparator: (base) => ({\r\n    ...base,\r\n    display: \"none\",\r\n  }),\r\n};\r\n\r\n\r\nconst AddCustomer = (props) => {\r\n  \r\n  const { id } = useParams();\r\n  console.log(id ,\"id is :\")\r\n  const history = useHistory()\r\n\tconst [image, setImage] = useState(\"\")\r\n\tconst [disabled, setDisabled] = useState(false);\r\n\tconst [uploading, setUploading] = useState(false)\r\n\tconst [validator] = useState(new SimpleReactValidator());\r\n\tconst [formInput, setFormInput] = useReducer(\r\n\t  (state, newState) => ({ ...state, ...newState }),\r\n\t  {\r\n\t\tname: \"\",\r\n\t\temail: \"\",\r\n    cnic:\"\",\r\n\t\tdob: \"\",\r\n\t\tstatus: \"\",\r\n\t\timage: \"\"\r\n\t  }\r\n\t);\r\n\r\n\tconst statuses = [\r\n\t  { label: \"active\", value: \"active\" },\r\n\t  { label: \"Inactive\", value: \"Inactive\" },\r\n\t];\r\n\r\n\r\n    const handleInput = (evt) => {\r\n        const name = evt.target.name;\r\n        const newValue = evt.target.value;\r\n        setFormInput({ [name]: newValue });\r\n      };\r\n  \r\n      const handleSelect = (e, which) => {\r\n          if (which == 'type') {\r\n              setFormInput({ ['type']: e.value })\r\n          } else if (which == 'status') {\r\n              setFormInput({ ['status']: e.value })\r\n          } else if (which == 'date') {\r\n              setFormInput({ ['dob']: e })\r\n          }\r\n      }\r\n  \r\n      const handleAnimalImage = async (e) => {\r\n         const file = e.target.files[0];\r\n         const formData = new FormData();\r\n         formData.append(\"image\", file);\r\n         setUploading(true);\r\n  \r\n         try {\r\n           const config = {\r\n             headers: {\r\n               \"Content-Type\": \"multipart/form-data\",\r\n             },\r\n           };\r\n  \r\n           const { data } = await axios.post(\"/upload\", formData, config);\r\n           console.log(data)\r\n  \r\n           setImage(data);\r\n           setFormInput({ ['image']: data})\r\n           setUploading(false);\r\n         } catch (error) {\r\n            toast.error('Image Upload Failed')\r\n            setUploading(false);\r\n         }\r\n      }\r\n  \r\n      const handleDatepickerFocus = (e) => {\r\n        e.target.parentNode.parentNode.parentNode.classList.add(\"active\");\r\n      };\r\n      const handleDatepickerBlur = (e) => {\r\n        e.target.parentNode.parentNode.parentNode.classList.remove(\"active\");\r\n      };\r\n  \r\n      const handleSubmit = async (e) => {\r\n        console.log({ ...formInput })\r\n          await props.addCustomer({ ...formInput })\r\n          setDisabled(false);\r\n      }; \r\n\r\n      const handleEdit = async (e) => {\r\n        setDisabled(true);\r\n        await props.updateCustomer({ ...formInput, id: id });\r\n        setDisabled(false);\r\n      };\r\n\r\n      useEffect(async () => {\r\n        if (id !== undefined && props.login.loginInfo) {\r\n          console.log(id);\r\n          async function getDetails() {\r\n            console.log(props.login.loginInfo.token);\r\n            console.log(\"herherh\",getCustomerData(id, props.login.loginInfo.token))\r\n            return await getCustomerData(id, props.login.loginInfo.token);\r\n          }\r\n          let result = await getDetails();\r\n          if (result.data.success) {\r\n            let d = result.data.details;\r\n            setFormInput({\r\n              name: d.name,\r\n              email: d.email,\r\n              dob: new Date(d.dob),\r\n              cnic: d.cnic,\r\n              status: d.status,\r\n              image: d.image,\r\n            });\r\n            setImage(d.image);\r\n          } else {\r\n            toast.error(result.data.message);\r\n          }\r\n        }\r\n      }, [id, props.login]);\r\n      useEffect(() => {\r\n        if (!props.addCustomerState.loading) {\r\n          if (props.addCustomerState.success) {\r\n            toast.success(\"Customer Added Successfully!\");\r\n            history.push(\"/customer\");\r\n          } else {\r\n            toast.error(props.addCustomerState.error);\r\n          }\r\n        }\r\n      }, [props.addCustomerState]);\r\n\r\n      useEffect(() => {\r\n        if (!props.updateCustomerState.loading) {\r\n          if (props.updateCustomerState.success) {\r\n            toast.success(\"Customer updated Successfully!\");\r\n            history.push(\"/customer\");\r\n          } else {\r\n            console.log(\"it comes heere:\",props.updateCustomerState.error)\r\n            toast.error(props.updateCustomerState.error);\r\n          }\r\n        }\r\n      }, [props.updateCustomerState]);\r\n    \r\n\r\n\r\n\r\n    return (\r\n        <>\r\n          <div className=\"add-animal\">\r\n            <div className=\"grey-box\">\r\n              <Container>\r\n                <Row className=\"justify-content-md-center\">\r\n                  <Col lg={10}>\r\n                  <h2 className=\"title\">\r\n                  <Link to=\"/dashboard\">\r\n                    <img src={chevLeft} alt=\"icon\" />\r\n                  </Link>\r\n                  {id != undefined ? \"Edit Customer\" : \"Add Customer\"}\r\n                </h2>\r\n                  </Col>\r\n                </Row>\r\n              </Container>\r\n            </div>\r\n            <Container>\r\n              <Row className=\"justify-content-md-center\">\r\n                <Col lg={10}>\r\n                  <div className=\"details\">\r\n                    <div className=\"personal-info\">\r\n                      <label htmlFor=\"profile_image\">\r\n                        {image ? (\r\n                          <div className=\"user-pic\">\r\n                            <img src={image} alt=\"Image\" />\r\n                          </div>\r\n                        ) : (\r\n                          <>\r\n                            <div className=\"name-spell\">AI</div>\r\n                          </>\r\n                        )}\r\n                      </label>\r\n                      <input\r\n                        type=\"file\"\r\n                        id=\"profile_image\"\r\n                        style={{ display: \"none\" }}\r\n                        disabled={uploading}\r\n                        onChange={handleAnimalImage}\r\n                      />\r\n                      <div className=\"text-details\">\r\n                        <p>Status: {formInput.status}</p>\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                      <Row className=\"p-3\">\r\n                        <Col lg={6}>\r\n                          <Form.Group>\r\n                            <Form.Label>Name</Form.Label>\r\n                            <FormControl\r\n                              name=\"name\"\r\n                              value={formInput.name}\r\n                              required\r\n                              id=\"name\"\r\n                              placeholder=\"Raani\"\r\n                              label=\"name\"\r\n                              autoComplete=\"name\"\r\n                              onChange={handleInput}\r\n                            />\r\n                            {validator.message(\r\n                              \"name\",\r\n                              formInput.name,\r\n                              \"required\",\r\n                              {\r\n                                className: \"text-danger\",\r\n                              }\r\n                            )}\r\n                          </Form.Group>\r\n\r\n                          <Form.Group>\r\n                            <Form.Label>Email</Form.Label>\r\n                            <FormControl\r\n                              name=\"email\"\r\n                              value={formInput.email}\r\n                              required\r\n                              id=\"email\"\r\n                              placeholder=\"customer@email.com\"\r\n                              label=\"email\"\r\n                              autoComplete=\"email\"\r\n                              onChange={handleInput}\r\n                            />\r\n                            {validator.message(\r\n                              \"emial\",\r\n                              formInput.name,\r\n                              \"required\",\r\n                              {\r\n                                className: \"text-danger\",\r\n                              }\r\n                            )}\r\n                          </Form.Group>\r\n                        </Col>\r\n                        <Col lg={3} className=\"\">\r\n                        <Form.Group>\r\n                          <Form.Label>CNIC</Form.Label>\r\n                          <FormControl\r\n                            required\r\n                            id=\"cnic\"\r\n                            label=\"CNIC\"\r\n                            name=\"cnic\"\r\n                            placeholder=\"3XXXX XXXXXXX X\"\r\n                            value={formInput.cnic}\r\n                            autoComplete=\"cnic\"\r\n                            onChange={handleInput}\r\n                          />\r\n                          {validator.message(\r\n                            \"cnic\",\r\n                            formInput.cnic,\r\n                            \"required\",\r\n                            {\r\n                              className: \"text-danger\",\r\n                            }\r\n                            )}\r\n                          </Form.Group>\r\n                    \r\n                          <Form.Group className=\"datepicker\">\r\n                            <Form.Label>Date of Birth:</Form.Label>\r\n                            <InputGroup className={\"input-group\"}>\r\n                              <DatePicker\r\n                                selected={formInput.dob}\r\n                                isClearable={true}\r\n                                className=\"datepicker-form-control\"\r\n                                onChange={(date, e) => handleSelect(date, \"date\")}\r\n                                onFocus={handleDatepickerFocus}\r\n                                onBlur={handleDatepickerBlur}\r\n                              />\r\n                              {/* <InputGroup.Append> */}\r\n                              <InputGroup.Text>\r\n                                <span className=\"icon\"></span>\r\n                              </InputGroup.Text>\r\n                              {/* </InputGroup.Append> */}\r\n                            </InputGroup>\r\n                          </Form.Group>\r\n                        </Col>\r\n  \r\n                        <Col lg={6}>\r\n                          <Form.Label>Status</Form.Label>\r\n                          \r\n                          <Select\r\n                            className=\"status\"\r\n                            options={statuses}\r\n                            styles={customRoleControlStyles}\r\n                            value={{\r\n                              label: formInput.status,\r\n                              value: formInput.status,\r\n                            }}\r\n                            name=\"status\"\r\n                            onChange={(e) => {\r\n                              handleSelect(e, \"status\");\r\n                            }}\r\n                          />\r\n                        </Col>\r\n                        <Col lg={12} className=\"mt-5\">\r\n                        <Button\r\n                        variant=\"primary\"\r\n                        onClick={id != undefined ? handleEdit : handleSubmit}\r\n                        disabled={disabled}\r\n                      >\r\n                        {id != undefined ? \"Update\" : \"Save\"}\r\n                      </Button>\r\n                        </Col>\r\n                      </Row>\r\n                    </div>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n            </Container>\r\n          </div>\r\n        </>\r\n      );\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addCustomer: (data) => dispatch(addCustomer(data)),\r\n    updateCustomer: (data) => dispatch(updateCustomer(data)),\r\n  };\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    login: state.login,\r\n    addCustomerState: state.customer.addCustomerReducer,\r\n    updateCustomerState: state.customer.updateCustomerReducer,\r\n\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddCustomer);\r\n","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\pages\\DailyRecord\\MilkProduction.js",["298","299","300","301","302","303","304","305","306","307","308","309","310"],"/*****************Issue/15************************ */\r\n// Developed by: Khawaja Junaid \r\n\r\nimport React, { useEffect, useReducer, useCallback, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getAnimals } from \"../../actions/farmActions\";\r\nimport {\r\n  Container,\r\n  Button,\r\n  Form,\r\n  InputGroup,\r\n  FormControl,\r\n  Nav\r\n} from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\nimport Select from \"react-select\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport {NavLink, useHistory } from \"react-router-dom\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport TrashIcon from \"../../assets/images/icons/trash.svg\";\r\nimport SearchIcon from \"../../assets/images/icons/search.svg\";\r\nimport { filterTableStyles } from \"../../assets/styledComponents/tableStyles\";\r\nimport { filterTableSelectStyles } from \"../../assets/styledComponents/selectStyles\";\r\nimport { deleteAnimal } from \"../../services/apiServices\";\r\nimport { toast } from \"react-toastify\";\r\nimport { animalStatuses, animalTypes } from \"../../constants/options\";\r\nimport PlusIcon from \"../../assets/images/icons/plusicon.svg\";\r\nimport { getMilkProductionRecords } from '../../services/apiServices';\r\n\r\n\r\n\r\nfunction MilkProduction(props) {\r\n  let history = useHistory();\r\n  let prod=\"none\";\r\n  const [data, setData] = useState([]);\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const handleAnimalComponent = useCallback((state) => handleRowClick(state));\r\n  const [filters, setFilters] = useReducer(\r\n    (state, newState) => ({ ...state, ...newState }),\r\n    {\r\n      status: \"\",\r\n      type: \"\",\r\n      dob: \"\",\r\n      search: \"\",\r\n    }\r\n  );\r\n\r\n  const handleRowClick = (row) => {\r\n    history.push({\r\n      pathname: `/milk-records/${row._id}`,\r\n      state: {\r\n        data: row,\r\n      },\r\n    });\r\n  };\r\n\r\n  const [record, setRecord] = useState(\"\")\r\n  useEffect(() => {\r\n    async function getAnimalsData() {\r\n      await props.getAnimals();\r\n      console.log(props.getAnimals())\r\n      let records= await getMilkProductionRecords(props.login.loginInfo.token) \r\n      setRecord(records)\r\n      console.log(records)\r\n    }\r\n \r\n\r\n    getAnimalsData();\r\n    \r\n  }, []);\r\n  useEffect(() => {\r\n    if (props.animals.animals) {\r\n      setData(props.animals.animals.animalsData);\r\n    }\r\n  }, [props.animals]);\r\n\r\n  const handleDatepickerFocus = (e) => {\r\n    e.target.parentNode.parentNode.parentNode.classList.add(\"active\");\r\n  };\r\n  const handleDatepickerBlur = (e) => {\r\n    e.target.parentNode.parentNode.parentNode.classList.remove(\"active\");\r\n  };\r\n\r\n  // checking if any filter is set or not\r\n  const filtersIsSet = () => {\r\n    let set = false;\r\n    Object.keys(filters).forEach((k, idx) => {\r\n      if (filters[k]) {\r\n        set = true;\r\n      }\r\n    });\r\n    return set;\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      name: \"Tag:\",\r\n      selector: \"tag\",\r\n      sortable: true,\r\n    },\r\n    // {\r\n    //   name: \"Type:\",\r\n    //   selector: \"type\",\r\n    //   sortable: true,\r\n    //   cell: (row) => <div>{row.type}</div>,\r\n    // },\r\n    \r\n    {\r\n      name: \"Name:\",\r\n      selector: \"name\",\r\n      sortable: true,\r\n      cell: (row) => (\r\n        <div className=\"d-flex align-items-center\">\r\n          {row && row.image ? (\r\n            <>\r\n              <div className=\"generic-user-pic\">\r\n                <div className=\"user-pic\">\r\n                  <img src={row.image} alt=\"Image\" />\r\n                </div>\r\n              </div>\r\n              {row.name}\r\n            </>\r\n          ) : row && row.name ? (\r\n            <>\r\n              <div className=\"team-name-short mr-2\">\r\n                {row.name.replace(/[^a-zA-Z-0-9 ]/g, \"\").match(/\\b\\w/g)}\r\n              </div>\r\n              {row.name} {row.name}\r\n            </>\r\n          ) : null}\r\n        </div>\r\n      ),\r\n    },\r\n    \r\n    {\r\n      name: \"Date of Birth\",\r\n      selector: \"dob\",\r\n      sortable: true,\r\n      cell: (row) => moment(row.dob).format(\"MM/DD/YYYY\"),\r\n    },\r\n    {\r\n      name: \"Morning Production (L)\",\r\n      selector: \"Morning\",\r\n  \r\n      cell: (row) => (\r\n      \r\n          record.data? record.data.milkRecords.map((milk)=>{\r\n          return(\r\n              <div>\r\n                  { prod=Object.keys(milk.record).map((key) => {\r\n                      return (\r\n\r\n\r\n                        row._id=== key?\r\n                        moment(row.dob).format(\"MM/DD/YYYY\")===moment(milk.date).format(\"MM/DD/YYYY\")? milk.record[key].morning:\"\"\r\n        \r\n                        :\"\")\r\n                  }\r\n                  \r\n                  )\r\n                  }\r\n              </div>\r\n              )\r\n          \r\n\r\n        }) :\"no record\"\r\n      \r\n      ),\r\n    },\r\n    {\r\n      name: \"Evening Production (L)\",\r\n      selector: \"Evening\",\r\n  \r\n      cell: (row) => (\r\n      \r\n          record.data? record.data.milkRecords.map((milk)=>{\r\n          return(\r\n              <div>\r\n                  { prod=Object.keys(milk.record).map((key) => {\r\n                      return (\r\n\r\n\r\n                        row._id=== key?\r\n                        moment(row.dob).format(\"MM/DD/YYYY\")===moment(milk.date).format(\"MM/DD/YYYY\")? milk.record[key].evening:\"\"\r\n        \r\n                        :\"\")\r\n                  }\r\n                  \r\n                  )\r\n                  }\r\n              </div>\r\n              )\r\n          \r\n\r\n        }) :\"no record\"\r\n      \r\n      ),\r\n    },\r\n    {\r\n      name: \"Status:\",\r\n      selector: \"status\",\r\n      cell: (row) => (\r\n        <div className=\"d-flex align-items-center w-100 q-status-section justify-content-end\">\r\n          <div\r\n            className={\r\n              row.status === \"Sold\" || row.status === \"Sent to approval\"\r\n                ? \"badge badge-info mr-2\"\r\n                : row.status === \"Dead\"\r\n                ? \"badge badge-danger mr-2\"\r\n                : \"badge badge-success mr-2\"\r\n            }\r\n          >\r\n            {row.status}\r\n          </div>\r\n          <Button\r\n            className=\"btn-icon m-0\"\r\n            variant=\"outline-light\"\r\n            onClick={() => deleteAnimalById(row._id)}\r\n          >\r\n            <img src={TrashIcon} alt=\"Trash Icon\" className=\"icon-black\" />\r\n          </Button>\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const deleteAnimalById = async (id) => {\r\n    let result = await deleteAnimal({ id }, props.login.loginInfo.token);\r\n    if (result.data.success) {\r\n      toast.success(result.data.message);\r\n      props.getAnimals();\r\n    } else {\r\n      toast.error(result.data.message);\r\n    }\r\n  };\r\n\r\n  const handleFilter = (index, e, eTarget = null) => {\r\n    let filtersCopy = filters;\r\n    if (index === \"dob\") {\r\n      filtersCopy[index] = e;\r\n      eTarget.target.closest(\".input-group\").classList.remove(\"active\");\r\n    } else if (index === \"search\") {\r\n      filtersCopy[index] = e.target.value;\r\n    } else {\r\n      if (e) {\r\n        filtersCopy[index] = e.value;\r\n      } else {\r\n        filtersCopy[index] = \"\";\r\n      }\r\n    }\r\n    setFilters({ ...filtersCopy });\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"filters\", filters);\r\n    let dataCopy = data;\r\n    let filteredDataCopy = [];\r\n\r\n    // Filtering based on status\r\n    if (filters.status) {\r\n      dataCopy.forEach((c, idx) => {\r\n        if (c.status == filters.status) {\r\n          filteredDataCopy.push(c);\r\n        }\r\n      });\r\n      dataCopy = [...filteredDataCopy];\r\n      filteredDataCopy = [];\r\n    }\r\n\r\n    if (filters.type) {\r\n      dataCopy.forEach((c, idx) => {\r\n        if (c.type == filters.type) {\r\n          filteredDataCopy.push(c);\r\n        }\r\n      });\r\n      dataCopy = [...filteredDataCopy];\r\n      filteredDataCopy = [];\r\n    }\r\n\r\n    if (filters.dob) {\r\n      dataCopy.forEach((c, idx) => {\r\n        if (\r\n          moment(c.dob).format(\"MM/DD/YYYY\") ==\r\n          moment(filters.dob).format(\"MM/DD/YYYY\")\r\n        ) {\r\n          filteredDataCopy.push(c);\r\n        }\r\n      });\r\n      dataCopy = [...filteredDataCopy];\r\n      filteredDataCopy = [];\r\n    }\r\n\r\n    if (filters.search) {\r\n      let searchField = filters.search.toLowerCase();\r\n      dataCopy.forEach((c, idx) => {\r\n        let check = false;\r\n        if (c.name) {\r\n          if (c.name.toLowerCase().includes(searchField)) {\r\n            check = true;\r\n          }\r\n        }\r\n        if (check) {\r\n          filteredDataCopy.push(c);\r\n        }\r\n      });\r\n      dataCopy = [...filteredDataCopy];\r\n      filteredDataCopy = [];\r\n    }\r\n    setFilteredData([...dataCopy]);\r\n  }, [filters]);\r\n\r\n  const FilterComponent = ({}) => (\r\n    <div className=\"d-flex align-items-center justify-content-between tableHead\">\r\n      <div className=\"table-filters\">\r\n        <Form.Group className=\"mb-0\">\r\n          <Select\r\n            styles={filterTableSelectStyles}\r\n            options={animalStatuses}\r\n            placeholder=\"Status\"\r\n            isClearable={true}\r\n            onChange={(e) => handleFilter(\"status\", e)}\r\n            value={animalStatuses.find((s) => {\r\n              return s.value === filters.status;\r\n            })}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group className=\"mb-0\">\r\n          <Select\r\n            styles={filterTableSelectStyles}\r\n            options={animalTypes}\r\n            placeholder=\"Type\"\r\n            isClearable={true}\r\n            onChange={(e) => handleFilter(\"type\", e)}\r\n            value={animalTypes.find((t) => {\r\n              return t.value === filters.type;\r\n            })}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group className=\"datepicker mb-0\">\r\n          <InputGroup className={\"input-group\"}>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text className=\"\">\r\n                <span className=\"icon\"></span>\r\n              </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <DatePicker\r\n              selected={filters.dob}\r\n              isClearable={true}\r\n              // minDate={new Date()}\r\n              className=\"datepicker-form-control\"\r\n              onChange={(date, e) => handleFilter(\"dob\", date, e)}\r\n              onFocus={handleDatepickerFocus}\r\n              onBlur={handleDatepickerBlur}\r\n            />\r\n          </InputGroup>\r\n        </Form.Group>\r\n      </div>\r\n    \r\n      <Button>\r\n      <Nav.Link\r\n                  as={NavLink}\r\n                  className=\"btn-primary\"\r\n                  eventKey=\"5\"\r\n                  to=\"/milk-records/add\"\r\n                >\r\n                  <div className=\"icon\">\r\n                    <img src={PlusIcon} alt=\"Icon Image\" />\r\n                    {\"    \"}\r\n                    Add Milk Production\r\n                  </div>\r\n                  \r\n                  \r\n      </Nav.Link>\r\n      </Button>\r\n      \r\n      <div className=\"table-filters justify-content-end\">\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            autoFocus={true}\r\n            id=\"search_field\"\r\n            name=\"search_field\"\r\n            placeholder=\"Search\"\r\n            value={filters.search}\r\n            onFocus={(e) => e.target.parentNode.classList.add(\"active\")}\r\n            onBlur={(e) => {\r\n              e.target.parentNode.classList.remove(\"active\");\r\n            }}\r\n            onChange={(e) => handleFilter(\"search\", e)}\r\n          />\r\n          <InputGroup.Append>\r\n            <InputGroup.Text>\r\n              <img src={SearchIcon} />\r\n            </InputGroup.Text>\r\n          </InputGroup.Append>\r\n        </InputGroup>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const subHeaderComponentMemo = React.useMemo(() => {\r\n    return <FilterComponent />;\r\n  }, [props.animals.animalsData, filters]);\r\n\r\n  return (\r\n\r\n    \r\n    <div className=\"animals-page mt-4 mb-4\">\r\n  \r\n      <Container>\r\n        <DataTable\r\n          customStyles={filterTableStyles}\r\n          responsive\r\n          fixedHeader={true}\r\n          columns={columns}\r\n          data={filtersIsSet() ? filteredData : data}\r\n          onRowClicked={handleAnimalComponent}\r\n          subHeader\r\n          subHeaderComponent={subHeaderComponentMemo}\r\n          pagination\r\n          persistTableHead\r\n        />\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getAnimals: (data) => dispatch(getAnimals(data)),\r\n  };\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    login: state.login,\r\n    animals: state.farm.animals,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MilkProduction);\r\n","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\pages\\Customer\\Customers.js",["311","312","313","314","315","316","317","318","319","320","321"],"import React, { useEffect, useReducer, useCallback, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getCustomers } from \"../../actions/customerAction\";\r\nimport {\r\n  Container,\r\n  Button,\r\n  Form,\r\n  InputGroup,\r\n  FormControl,\r\n} from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\nimport Select from \"react-select\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport TrashIcon from \"../../assets/images/icons/trash.svg\";\r\nimport SearchIcon from \"../../assets/images/icons/search.svg\";\r\nimport { filterTableStyles } from \"../../assets/styledComponents/tableStyles\";\r\nimport { filterTableSelectStyles } from \"../../assets/styledComponents/selectStyles\";\r\nimport { deleteCustomer } from \"../../services/apiServices\";\r\nimport { toast } from \"react-toastify\";\r\nimport { customerStatuses } from \"../../constants/customerOptions\";\r\n\r\n\r\nfunction Customers(props) {\r\n  let history = useHistory();\r\n  const [data, setData] = useState([]);\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const handleAnimalComponent = useCallback((state) => handleRowClick(state));\r\n  const [filters, setFilters] = useReducer(\r\n    (state, newState) => ({ ...state, ...newState }),\r\n    {\r\n      status: \"\",\r\n      dob: \"\",\r\n      search: \"\",\r\n    }\r\n  );\r\n  console.log(\"fired up\")\r\n  const handleRowClick = (row) => {\r\n    history.push({\r\n      pathname: `/customer/${row._id}`,\r\n      state: {\r\n        data: row,\r\n      },\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function getCustomersData() {\r\n      await props.getCustomers();\r\n    }\r\n    getCustomersData();\r\n    \r\n  }, []);\r\n  useEffect(() => {\r\n    if (props.customers.customers) {\r\n      setData(props.customers.customers.customersData);\r\n    }\r\n  }, [props.customers]);\r\n\r\n  const handleDatepickerFocus = (e) => {\r\n    e.target.parentNode.parentNode.parentNode.classList.add(\"active\");\r\n  };\r\n  const handleDatepickerBlur = (e) => {\r\n    e.target.parentNode.parentNode.parentNode.classList.remove(\"active\");\r\n  };\r\n\r\n  // checking if any filter is set or not\r\n  const filtersIsSet = () => {\r\n    let set = false;\r\n    Object.keys(filters).forEach((k, idx) => {\r\n      if (filters[k]) {\r\n        set = true;\r\n      }\r\n    });\r\n    return set;\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      name: \"Name:\",\r\n      selector: \"name\",\r\n      sortable: true,\r\n      cell: (row) => (\r\n        <div className=\"d-flex align-items-center\">\r\n          {row && row.image ? (\r\n            <>\r\n              <div className=\"generic-user-pic\">\r\n                <div className=\"user-pic\">\r\n                  <img src={row.image} alt=\"Image\" />\r\n                </div>\r\n              </div>\r\n              {row.name}\r\n            </>\r\n          ) : row && row.name ? (\r\n            <>\r\n              <div className=\"team-name-short mr-2\">\r\n                {row.name.replace(/[^a-zA-Z-0-9 ]/g, \"\").match(/\\b\\w/g)}\r\n              </div>\r\n              {row.name} {row.name}\r\n            </>\r\n          ) : null}\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      name: \"Date of Birth\",\r\n      selector: \"dob\",\r\n      sortable: true,\r\n      cell: (row) => moment(row.dob).format(\"MM/DD/YYYY\"),\r\n    },\r\n    {\r\n      name: \"Status:\",\r\n      selector: \"status\",\r\n      cell: (row) => (\r\n        <div className=\"d-flex align-items-center w-100 q-status-section justify-content-end\">\r\n          <div\r\n            className={\r\n              row.status === \"Active\" || row.status === \"Sent to approval\"\r\n                ? \"badge badge-info mr-2\"\r\n                : row.status === \"Inactive\"\r\n                ? \"badge badge-danger mr-2\"\r\n                : \"badge badge-success mr-2\"\r\n            }\r\n          >\r\n            {row.status}\r\n          </div>\r\n          <Button\r\n            className=\"btn-icon m-0\"\r\n            variant=\"outline-light\"\r\n            onClick={() => deleteCustomerById(row._id)}\r\n          >\r\n            <img src={TrashIcon} alt=\"Trash Icon\" className=\"icon-black\" />\r\n          </Button>\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const deleteCustomerById = async (id) => {\r\n    let result = await deleteCustomer({ id }, props.login.loginInfo.token);\r\n    if (result.data.success) {\r\n      toast.success(result.data.message);\r\n      props.getCustomers();\r\n    } else {\r\n      toast.error(result.data.message);\r\n    }\r\n  };\r\n\r\n  const handleFilter = (index, e, eTarget = null) => {\r\n    let filtersCopy = filters;\r\n    if (index === \"dob\") {\r\n      filtersCopy[index] = e;\r\n      eTarget.target.closest(\".input-group\").classList.remove(\"active\");\r\n    } else if (index === \"search\") {\r\n      filtersCopy[index] = e.target.value;\r\n    } else {\r\n      if (e) {\r\n        filtersCopy[index] = e.value;\r\n      } else {\r\n        filtersCopy[index] = \"\";\r\n      }\r\n    }\r\n    setFilters({ ...filtersCopy });\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"filters\", filters);\r\n    let dataCopy = data;\r\n    let filteredDataCopy = [];\r\n\r\n    // Filtering based on status\r\n    if (filters.status) {\r\n      dataCopy.forEach((c, idx) => {\r\n        if (c.status == filters.status) {\r\n          filteredDataCopy.push(c);\r\n        }\r\n      });\r\n      dataCopy = [...filteredDataCopy];\r\n      filteredDataCopy = [];\r\n    }\r\n\r\n    if (filters.type) {\r\n      dataCopy.forEach((c, idx) => {\r\n        if (c.type == filters.type) {\r\n          filteredDataCopy.push(c);\r\n        }\r\n      });\r\n      dataCopy = [...filteredDataCopy];\r\n      filteredDataCopy = [];\r\n    }\r\n\r\n    if (filters.dob) {\r\n      dataCopy.forEach((c, idx) => {\r\n        if (\r\n          moment(c.dob).format(\"MM/DD/YYYY\") ==\r\n          moment(filters.dob).format(\"MM/DD/YYYY\")\r\n        ) {\r\n          filteredDataCopy.push(c);\r\n        }\r\n      });\r\n      dataCopy = [...filteredDataCopy];\r\n      filteredDataCopy = [];\r\n    }\r\n\r\n    if (filters.search) {\r\n      let searchField = filters.search.toLowerCase();\r\n      dataCopy.forEach((c, idx) => {\r\n        let check = false;\r\n        if (c.name) {\r\n          if (c.name.toLowerCase().includes(searchField)) {\r\n            check = true;\r\n          }\r\n        }\r\n        if (check) {\r\n          filteredDataCopy.push(c);\r\n        }\r\n      });\r\n      dataCopy = [...filteredDataCopy];\r\n      filteredDataCopy = [];\r\n    }\r\n    setFilteredData([...dataCopy]);\r\n  }, [filters]);\r\n\r\n  const FilterComponent = ({}) => (\r\n    <div className=\"d-flex align-items-center justify-content-between tableHead\">\r\n      <div className=\"table-filters\">\r\n        <Form.Group className=\"mb-0\">\r\n          <Select\r\n            styles={filterTableSelectStyles}\r\n            options={customerStatuses}\r\n            placeholder=\"Status\"\r\n            isClearable={true}\r\n            onChange={(e) => handleFilter(\"status\", e)}\r\n            value={customerStatuses.find((s) => {\r\n              return s.value === filters.status;\r\n            })}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group className=\"datepicker mb-0\">\r\n          <InputGroup className={\"input-group\"}>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text className=\"\">\r\n                <span className=\"icon\"></span>\r\n              </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <DatePicker\r\n              selected={filters.dob}\r\n              isClearable={true}\r\n              // minDate={new Date()}\r\n              className=\"datepicker-form-control\"\r\n              onChange={(date, e) => handleFilter(\"dob\", date, e)}\r\n              onFocus={handleDatepickerFocus}\r\n              onBlur={handleDatepickerBlur}\r\n            />\r\n          </InputGroup>\r\n        </Form.Group>\r\n      </div>\r\n      <div className=\"table-filters justify-content-end\">\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            autoFocus={true}\r\n            id=\"search_field\"\r\n            name=\"search_field\"\r\n            placeholder=\"Search\"\r\n            value={filters.search}\r\n            onFocus={(e) => e.target.parentNode.classList.add(\"active\")}\r\n            onBlur={(e) => {\r\n              e.target.parentNode.classList.remove(\"active\");\r\n            }}\r\n            onChange={(e) => handleFilter(\"search\", e)}\r\n          />\r\n          <InputGroup.Append>\r\n            <InputGroup.Text>\r\n              <img src={SearchIcon} />\r\n            </InputGroup.Text>\r\n          </InputGroup.Append>\r\n        </InputGroup>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const subHeaderComponentMemo = React.useMemo(() => {\r\n    return <FilterComponent />;\r\n  }, [props.customers.customersData, filters]);\r\n\r\n  return (\r\n    <div className=\"animals-page mt-4 mb-4\">\r\n      <Container>\r\n        <DataTable\r\n          customStyles={filterTableStyles}\r\n          responsive\r\n          fixedHeader={true}\r\n          columns={columns}\r\n          data={filtersIsSet() ? filteredData : data}\r\n          onRowClicked={handleAnimalComponent}\r\n          subHeader\r\n          subHeaderComponent={subHeaderComponentMemo}\r\n          pagination\r\n          persistTableHead\r\n        />\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getCustomers: (data) => dispatch(getCustomers(data)),\r\n  };\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    login: state.login,\r\n    customers: state.customer.customers,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Customers);\r\n","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\components\\layouts\\Navigation.js",["322","323","324","325","326","327","328","329"],"import React, { useState, useEffect } from \"react\";\r\nimport { NavLink, useHistory } from \"react-router-dom\";\r\nimport { Navbar, Nav, NavDropdown } from \"react-bootstrap\";\r\nimport Logo from \"../../assets/images/logo.jpg\";\r\nimport { connect } from \"react-redux\";\r\nimport { logout } from \"../../actions/userAction\";\r\nimport PlusIcon from \"../../assets/images/icons/plusicon.svg\";\r\nimport InboxIcon from \"../../assets/images/icons/inbox.svg\";\r\n\r\nfunction Navigation(props) {\r\n  const [toggle, setToggle] = useState(false);\r\n  const [userData, setUserData] = useState({});\r\n\r\n  const handleOverlays = () => setToggle(!toggle);\r\n  const handleToggleClick = () => setToggle(!toggle);\r\n\r\n  const handleLogout = (e) => {\r\n    e.preventDefault();\r\n    props.logout();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (\r\n      props.login &&\r\n      props.login.loginInfo &&\r\n      Object.keys(props.login.loginInfo).length > 0\r\n    ) {\r\n      setUserData(props.login.loginInfo);\r\n    }\r\n  }, [props.login]);\r\n\r\n  return (\r\n    <div>\r\n      {Object.keys(userData).length > 0 ? (\r\n        <Navbar collapseOnSelect id=\"header-dashboard\" expand=\"lg\">\r\n          <div className=\"logo\">\r\n            <Nav.Link as={NavLink} eventKey=\"1\" to=\"/\" className=\"p-0\">\r\n              <img src={Logo} />\r\n            </Nav.Link>\r\n          </div>\r\n          <Navbar.Toggle\r\n            onClick={handleToggleClick}\r\n            aria-controls=\"basic-navbar-nav\"\r\n          />\r\n          <div\r\n            id=\"basic-navbar-nav\"\r\n            className={`${\r\n              toggle\r\n                ? \"navbar-collapse collapse show\"\r\n                : \"navbar-collapse collapse\"\r\n            }`}\r\n          >\r\n            <div className=\"d-flex justify-content-between align-items-center w-100\">\r\n              <Nav>\r\n                <Nav.Link as={NavLink} eventKey=\"2\" to=\"/dashboard\">\r\n                  Dashboard\r\n                </Nav.Link>\r\n                <Nav.Link as={NavLink} eventKey=\"3\" to=\"/animals\">\r\n                  Animals\r\n                </Nav.Link>\r\n               \r\n                <Nav.Link as={NavLink} eventKey=\"4\" to=\"/milk-records\">\r\n                  Milk Records\r\n                </Nav.Link>\r\n                <Nav.Link as={NavLink} eventKey=\"8\" to=\"/customer\">\r\n                  Customers\r\n                </Nav.Link>\r\n                <Nav.Link\r\n                  as={NavLink}\r\n                  className=\"btn-primary\"\r\n                  eventKey=\"7\"\r\n                  to=\"/customer/add\"\r\n                >\r\n                  <div className=\"icon\">\r\n                    <img src={PlusIcon} alt=\"Icon Image\" />\r\n                  </div>{\" \"}\r\n                  Add Customers\r\n                </Nav.Link>\r\n\r\n                <Nav.Link\r\n                  as={NavLink}\r\n                  className=\"btn-primary\"\r\n                  eventKey=\"5\"\r\n                  to=\"/animals/add\"\r\n                >\r\n                  <div className=\"icon\">\r\n                    <img src={PlusIcon} alt=\"Icon Image\" />\r\n                  </div>{\" \"}\r\n                  Add Animal\r\n                </Nav.Link> \r\n                <Nav.Link\r\n                  as={NavLink}\r\n                  className=\"mob-nav\"\r\n                  eventKey=\"6\"\r\n                  to=\"/farm/settings\"\r\n                >\r\n                  Settings\r\n                </Nav.Link>\r\n                <NavDropdown.Divider />\r\n                <Nav.Link onClick={handleLogout} className=\"mob-nav\">\r\n                  Logout\r\n                </Nav.Link>\r\n              </Nav>\r\n              <Nav className=\"d-flex align-items-center drop-right\">\r\n                {/* <Nav.Link\r\n                        className=\"with-icon inbox\"\r\n                        as={NavLink}\r\n                        eventKey=\"7\"\r\n                        to=\"/dashboard\"\r\n                        >\r\n                            Contact Us\r\n                        </Nav.Link>\r\n                    </Nav>\r\n                    <Nav className=\"d-flex align-items-center\">\r\n                        <Nav.Link as={NavLink} eventKey=\"5\" to=\"/login\"\r\n                            className = \"mr-4\">\r\n                            Log in\r\n                        </Nav.Link>\r\n                        <Nav.Link\r\n                            as={NavLink}\r\n                            eventKey=\"6\"\r\n                            className=\"btn btn-primary ml-4 px-4\"\r\n                            to=\"/register\"\r\n                        >\r\n                            Register\r\n                        </Nav.Link>\r\n                        <Nav.Link as={NavLink} eventKey=\"7\" to=\"/AddAnimal\"\r\n                            className = \"mr-4\">\r\n                            Add Animal\r\n                        </Nav.Link>\r\n                    </Nav>\r\n                </div>\r\n                        <div className=\"icon\">\r\n                            <img\r\n                            src={InboxIcon}\r\n                            alt=\"Icon Image\"\r\n                            onClick={handleNotifications}\r\n                            />\r\n                        </div>\r\n                        <span className=\"msg-count\">4</span>\r\n                        <div className=\"inbox-text\">Inbox</div>\r\n                        </Nav.Link> */}\r\n                {/* <NavDropdown\r\n                    as=\"a\"\r\n                    eventKey=\"7\"\r\n                    className=\"dropdownAfter\"\r\n                    // onClick={handleNotifications}\r\n                    title={\r\n                      <a className=\"with-icon inbox\">\r\n                        <div className=\"icon\">\r\n                          <img src={InboxIcon} alt=\"Icon Image\" />\r\n                          <span className=\"msg-count\">0</span>\r\n                          <span className=\"msg-count\">{notificationsCount}</span>\r\n                          <div className=\"inbox-text\">Inbox</div>\r\n                        </div>\r\n                      </a>\r\n                    }\r\n                  >\r\n                    {formattedNotif}\r\n                            {formattedNotif.length <= 1 ? (\r\n                    <NavDropdown.Item>No notifications</NavDropdown.Item>\r\n                    ) : null}\r\n                  </NavDropdown> */}\r\n                <div className=\"d-flex align-items-center\">\r\n                  <NavDropdown\r\n                    className=\"nav-option\"\r\n                    title={\r\n                      <div className=\"d-flex align-items-center\">\r\n                        {userData && userData.image ? (\r\n                          <div className=\"user-pic\">\r\n                            <img src={userData.image} alt=\"Image\" />\r\n                          </div>\r\n                        ) : (\r\n                          <div className=\"name-char\">\r\n                            {userData.name\r\n                              .split(\" \")[0]\r\n                              .charAt(0)\r\n                              .toUpperCase() +\r\n                              userData.name\r\n                                .split(\" \")[1]\r\n                                .charAt(0)\r\n                                .toUpperCase()}\r\n                          </div>\r\n                        )}\r\n                        <div className=\"d-flex flex-column\">\r\n                          {userData.name.split(\" \")[0] +\r\n                            \" \" +\r\n                            userData.name.split(\" \")[1]}\r\n                          {userData.role ? (\r\n                            <small>{userData.role}</small>\r\n                          ) : null}\r\n                        </div>\r\n                      </div>\r\n                    }\r\n                  >\r\n                    <NavDropdown.Item\r\n                      as={NavLink}\r\n                      eventKey=\"8\"\r\n                      to=\"/farm/settings\"\r\n                    >\r\n                      Settings\r\n                    </NavDropdown.Item>\r\n                    <NavDropdown.Divider />\r\n                    <NavDropdown.Item onClick={handleLogout}>\r\n                      Logout\r\n                    </NavDropdown.Item>\r\n                  </NavDropdown>\r\n                </div>\r\n              </Nav>\r\n            </div>\r\n          </div>\r\n        </Navbar>\r\n      ) : (\r\n        <Navbar collapseOnSelect id=\"header\" expand=\"lg\">\r\n          <div className=\"logo\">\r\n            <Nav.Link as={NavLink} eventKey=\"1\" to=\"/\">\r\n              <img src={Logo} />\r\n            </Nav.Link>\r\n          </div>\r\n          <Navbar.Toggle\r\n            onClick={handleToggleClick}\r\n            aria-controls=\"basic-navbar-nav\"\r\n          />\r\n          <div\r\n            id=\"basic-navbar-nav\"\r\n            className={`${\r\n              toggle\r\n                ? \"navbar-collapse collapse show\"\r\n                : \"navbar-collapse collapse\"\r\n            }`}\r\n          >\r\n            <div className=\"d-flex justify-content-between align-items-center w-100\">\r\n              <Nav>\r\n                <Nav.Link as={NavLink} eventKey=\"2\" to=\"/platform\">\r\n                  Platform\r\n                </Nav.Link>\r\n                <Nav.Link\r\n                  as={NavLink}\r\n                  eventKey=\"3\"\r\n                  to=\"/pricing\"\r\n                  className=\"ml-4\"\r\n                >\r\n                  Pricing\r\n                </Nav.Link>\r\n                <Nav.Link\r\n                  as={NavLink}\r\n                  eventKey=\"4\"\r\n                  to=\"/contact\"\r\n                  className=\"ml-4\"\r\n                >\r\n                  Contact Us\r\n                </Nav.Link>\r\n              </Nav>\r\n              <Nav className=\"d-flex align-items-center\">\r\n                <>\r\n                  <Nav.Link\r\n                    as={NavLink}\r\n                    eventKey=\"5\"\r\n                    to=\"/login\"\r\n                    className=\"mr-4\"\r\n                  >\r\n                    Log in\r\n                  </Nav.Link>\r\n                  <Nav.Link\r\n                    as={NavLink}\r\n                    eventKey=\"6\"\r\n                    className=\"btn btn-primary ml-4 px-4\"\r\n                    to=\"/register\"\r\n                  >\r\n                    Register\r\n                  </Nav.Link>\r\n                </>\r\n              </Nav>\r\n            </div>\r\n          </div>\r\n        </Navbar>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    logout: (data) => dispatch(logout(data)),\r\n  };\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    login: state.login,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Navigation);\r\n","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\components\\layouts\\Slider.js",["330","331","332","333","334","335"],"import React from 'react';\r\nimport SlideImage from \"../../assets/images/logo.jpg\";\r\nimport Slider from \"react-slick\";\r\n// import \"slick-carousel/slick/slick.css\";\r\n// import \"slick-carousel/slick/slick-theme.css\";\r\n\r\n\r\nfunction LoginSlider() {\r\n    var settings = {\r\n        dots: true,\r\n        infinite: false,\r\n        nav: false,\r\n        speed: 500,\r\n        slidesToShow: 1,\r\n        slidesToScroll: 1\r\n    };\r\n    return (\r\n        <div className=\"border signin-slider\">\r\n            <Slider {...settings}>\r\n                <div>\r\n                    <img src={SlideImage} alt=\"Slider image\" />\r\n                </div>\r\n                <div>\r\n                    <img src={SlideImage} alt=\"Slider image\" />\r\n                </div>\r\n                <div>\r\n                    <img src={SlideImage} alt=\"Slider image\" />\r\n                </div>\r\n                <div>\r\n                    <img src={SlideImage} alt=\"Slider image\" />\r\n                </div>\r\n                <div>\r\n                    <img src={SlideImage} alt=\"Slider image\" />\r\n                </div>\r\n                <div>\r\n                    <img src={SlideImage} alt=\"Slider image\" />\r\n                </div>\r\n            </Slider>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginSlider\r\n","C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\constants\\otherConstants.js",[],"C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\constants\\options.js",[],"C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\constants\\farmConstants.js",[],"C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\constants\\userConstants.js",[],"C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\constants\\customerOptions.js",[],"C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\constants\\customerConstants.js",[],"C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\services\\apiServices.js",[],"C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\actions\\userAction.js",[],"C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\actions\\farmActions.js",[],"C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\actions\\customerAction.js",[],"C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\assets\\styledComponents\\selectStyles.js",[],"C:\\Users\\khawa\\OneDrive\\Desktop\\Sproj\\P04-Dairy-Farm-Management-System\\Prototype\\Development\\frontend\\src\\assets\\styledComponents\\tableStyles.js",[],{"ruleId":"336","severity":1,"message":"337","line":16,"column":8,"nodeType":"338","messageId":"339","endLine":16,"endColumn":14},{"ruleId":"336","severity":1,"message":"340","line":10,"column":5,"nodeType":"338","messageId":"339","endLine":10,"endColumn":20},{"ruleId":"336","severity":1,"message":"341","line":5,"column":10,"nodeType":"338","messageId":"339","endLine":5,"endColumn":21},{"ruleId":"336","severity":1,"message":"342","line":70,"column":11,"nodeType":"338","messageId":"339","endLine":70,"endColumn":16},{"ruleId":"336","severity":1,"message":"343","line":85,"column":9,"nodeType":"338","messageId":"339","endLine":85,"endColumn":14},{"ruleId":"344","severity":1,"message":"345","line":138,"column":8,"nodeType":"346","endLine":138,"endColumn":10,"suggestions":"347"},{"ruleId":"336","severity":1,"message":"348","line":1,"column":27,"nodeType":"338","messageId":"339","endLine":1,"endColumn":36},{"ruleId":"336","severity":1,"message":"349","line":9,"column":5,"nodeType":"338","messageId":"339","endLine":9,"endColumn":9},{"ruleId":"336","severity":1,"message":"350","line":11,"column":5,"nodeType":"338","messageId":"339","endLine":11,"endColumn":10},{"ruleId":"336","severity":1,"message":"351","line":13,"column":8,"nodeType":"338","messageId":"339","endLine":13,"endColumn":14},{"ruleId":"352","severity":1,"message":"353","line":84,"column":35,"nodeType":"354","messageId":"355","endLine":84,"endColumn":37},{"ruleId":"352","severity":1,"message":"356","line":97,"column":15,"nodeType":"354","messageId":"355","endLine":97,"endColumn":17},{"ruleId":"336","severity":1,"message":"349","line":8,"column":3,"nodeType":"338","messageId":"339","endLine":8,"endColumn":7},{"ruleId":"336","severity":1,"message":"357","line":12,"column":8,"nodeType":"338","messageId":"339","endLine":12,"endColumn":14},{"ruleId":"344","severity":1,"message":"358","line":96,"column":13,"nodeType":"359","endLine":119,"endColumn":4},{"ruleId":"352","severity":1,"message":"356","line":140,"column":15,"nodeType":"354","messageId":"355","endLine":140,"endColumn":17},{"ruleId":"360","severity":1,"message":"361","line":141,"column":22,"nodeType":"362","messageId":"363","endLine":141,"endColumn":39,"fix":"364"},{"ruleId":"352","severity":1,"message":"356","line":142,"column":22,"nodeType":"354","messageId":"355","endLine":142,"endColumn":24},{"ruleId":"360","severity":1,"message":"365","line":143,"column":22,"nodeType":"362","messageId":"363","endLine":143,"endColumn":41,"fix":"366"},{"ruleId":"352","severity":1,"message":"356","line":144,"column":22,"nodeType":"354","messageId":"355","endLine":144,"endColumn":24},{"ruleId":"360","severity":1,"message":"367","line":145,"column":22,"nodeType":"362","messageId":"363","endLine":145,"endColumn":32,"fix":"368"},{"ruleId":"360","severity":1,"message":"369","line":165,"column":22,"nodeType":"362","messageId":"363","endLine":165,"endColumn":37,"fix":"370"},{"ruleId":"344","severity":1,"message":"371","line":201,"column":6,"nodeType":"346","endLine":201,"endColumn":28,"suggestions":"372"},{"ruleId":"344","severity":1,"message":"371","line":212,"column":6,"nodeType":"346","endLine":212,"endColumn":31,"suggestions":"373"},{"ruleId":"352","severity":1,"message":"353","line":225,"column":23,"nodeType":"354","messageId":"355","endLine":225,"endColumn":25},{"ruleId":"374","severity":1,"message":"375","line":239,"column":25,"nodeType":"376","endLine":239,"endColumn":56},{"ruleId":"352","severity":1,"message":"353","line":353,"column":37,"nodeType":"354","messageId":"355","endLine":353,"endColumn":39},{"ruleId":"352","severity":1,"message":"353","line":356,"column":29,"nodeType":"354","messageId":"355","endLine":356,"endColumn":31},{"ruleId":"336","severity":1,"message":"377","line":1,"column":17,"nodeType":"338","messageId":"339","endLine":1,"endColumn":25},{"ruleId":"336","severity":1,"message":"378","line":2,"column":8,"nodeType":"338","messageId":"339","endLine":2,"endColumn":13},{"ruleId":"336","severity":1,"message":"379","line":6,"column":5,"nodeType":"338","messageId":"339","endLine":6,"endColumn":14},{"ruleId":"336","severity":1,"message":"380","line":7,"column":5,"nodeType":"338","messageId":"339","endLine":7,"endColumn":8},{"ruleId":"336","severity":1,"message":"381","line":8,"column":5,"nodeType":"338","messageId":"339","endLine":8,"endColumn":8},{"ruleId":"336","severity":1,"message":"382","line":10,"column":5,"nodeType":"338","messageId":"339","endLine":10,"endColumn":16},{"ruleId":"336","severity":1,"message":"350","line":11,"column":5,"nodeType":"338","messageId":"339","endLine":11,"endColumn":10},{"ruleId":"336","severity":1,"message":"383","line":45,"column":29,"nodeType":"338","messageId":"339","endLine":45,"endColumn":38},{"ruleId":"352","severity":1,"message":"356","line":51,"column":32,"nodeType":"354","messageId":"355","endLine":51,"endColumn":34},{"ruleId":"344","severity":1,"message":"384","line":55,"column":8,"nodeType":"346","endLine":55,"endColumn":29,"suggestions":"385"},{"ruleId":"336","severity":1,"message":"382","line":9,"column":3,"nodeType":"338","messageId":"339","endLine":9,"endColumn":14},{"ruleId":"344","severity":1,"message":"386","line":29,"column":33,"nodeType":"338","endLine":29,"endColumn":44},{"ruleId":"344","severity":1,"message":"345","line":54,"column":6,"nodeType":"346","endLine":54,"endColumn":8,"suggestions":"387"},{"ruleId":"374","severity":1,"message":"375","line":101,"column":19,"nodeType":"376","endLine":101,"endColumn":54},{"ruleId":"352","severity":1,"message":"356","line":186,"column":22,"nodeType":"354","messageId":"355","endLine":186,"endColumn":24},{"ruleId":"352","severity":1,"message":"356","line":196,"column":20,"nodeType":"354","messageId":"355","endLine":196,"endColumn":22},{"ruleId":"352","severity":1,"message":"356","line":207,"column":46,"nodeType":"354","messageId":"355","endLine":207,"endColumn":48},{"ruleId":"344","severity":1,"message":"388","line":234,"column":6,"nodeType":"346","endLine":234,"endColumn":15,"suggestions":"389"},{"ruleId":"390","severity":1,"message":"391","line":236,"column":28,"nodeType":"392","messageId":"355","endLine":236,"endColumn":30},{"ruleId":"374","severity":1,"message":"375","line":291,"column":21,"nodeType":"376","endLine":291,"endColumn":60},{"ruleId":"393","severity":1,"message":"394","line":317,"column":15,"nodeType":"376","endLine":317,"endColumn":39},{"ruleId":"344","severity":1,"message":"395","line":327,"column":6,"nodeType":"346","endLine":327,"endColumn":42,"suggestions":"396"},{"ruleId":"336","severity":1,"message":"378","line":1,"column":8,"nodeType":"338","messageId":"339","endLine":1,"endColumn":13},{"ruleId":"336","severity":1,"message":"397","line":11,"column":20,"nodeType":"338","messageId":"339","endLine":11,"endColumn":27},{"ruleId":"344","severity":1,"message":"398","line":14,"column":6,"nodeType":"346","endLine":14,"endColumn":8,"suggestions":"399"},{"ruleId":"336","severity":1,"message":"400","line":7,"column":3,"nodeType":"338","messageId":"339","endLine":7,"endColumn":9},{"ruleId":"336","severity":1,"message":"401","line":8,"column":3,"nodeType":"338","messageId":"339","endLine":8,"endColumn":8},{"ruleId":"336","severity":1,"message":"402","line":9,"column":3,"nodeType":"338","messageId":"339","endLine":9,"endColumn":7},{"ruleId":"336","severity":1,"message":"382","line":10,"column":3,"nodeType":"338","messageId":"339","endLine":10,"endColumn":14},{"ruleId":"336","severity":1,"message":"351","line":14,"column":8,"nodeType":"338","messageId":"339","endLine":14,"endColumn":14},{"ruleId":"336","severity":1,"message":"403","line":15,"column":8,"nodeType":"338","messageId":"339","endLine":15,"endColumn":17},{"ruleId":"374","severity":1,"message":"375","line":31,"column":29,"nodeType":"376","endLine":34,"endColumn":31},{"ruleId":"352","severity":1,"message":"356","line":66,"column":16,"nodeType":"354","messageId":"355","endLine":66,"endColumn":18},{"ruleId":"352","severity":1,"message":"356","line":70,"column":23,"nodeType":"354","messageId":"355","endLine":70,"endColumn":25},{"ruleId":"352","severity":1,"message":"353","line":71,"column":32,"nodeType":"354","messageId":"355","endLine":71,"endColumn":34},{"ruleId":"360","severity":1,"message":"404","line":113,"column":22,"nodeType":"362","messageId":"363","endLine":113,"endColumn":61,"fix":"405"},{"ruleId":"360","severity":1,"message":"406","line":114,"column":22,"nodeType":"362","messageId":"363","endLine":114,"endColumn":60,"fix":"407"},{"ruleId":"360","severity":1,"message":"408","line":115,"column":22,"nodeType":"362","messageId":"363","endLine":115,"endColumn":35,"fix":"409"},{"ruleId":"360","severity":1,"message":"410","line":116,"column":22,"nodeType":"362","messageId":"363","endLine":116,"endColumn":42,"fix":"411"},{"ruleId":"360","severity":1,"message":"412","line":117,"column":22,"nodeType":"362","messageId":"363","endLine":117,"endColumn":38,"fix":"413"},{"ruleId":"360","severity":1,"message":"414","line":118,"column":22,"nodeType":"362","messageId":"363","endLine":118,"endColumn":51,"fix":"415"},{"ruleId":"374","severity":1,"message":"375","line":182,"column":27,"nodeType":"376","endLine":182,"endColumn":80},{"ruleId":"374","severity":1,"message":"375","line":219,"column":29,"nodeType":"376","endLine":219,"endColumn":68},{"ruleId":"416","severity":1,"message":"417","line":228,"column":27,"nodeType":"376","endLine":228,"endColumn":76},{"ruleId":"374","severity":1,"message":"375","line":238,"column":29,"nodeType":"376","endLine":238,"endColumn":69},{"ruleId":"416","severity":1,"message":"417","line":246,"column":27,"nodeType":"376","endLine":246,"endColumn":77},{"ruleId":"374","severity":1,"message":"375","line":256,"column":29,"nodeType":"376","endLine":256,"endColumn":68},{"ruleId":"416","severity":1,"message":"417","line":262,"column":27,"nodeType":"376","endLine":262,"endColumn":80},{"ruleId":"352","severity":1,"message":"356","line":283,"column":21,"nodeType":"354","messageId":"355","endLine":283,"endColumn":23},{"ruleId":"374","severity":1,"message":"375","line":286,"column":21,"nodeType":"376","endLine":286,"endColumn":68},{"ruleId":"352","severity":1,"message":"356","line":327,"column":25,"nodeType":"354","messageId":"355","endLine":327,"endColumn":27},{"ruleId":"374","severity":1,"message":"375","line":330,"column":25,"nodeType":"376","endLine":330,"endColumn":72},{"ruleId":"336","severity":1,"message":"349","line":9,"column":3,"nodeType":"338","messageId":"339","endLine":9,"endColumn":7},{"ruleId":"336","severity":1,"message":"418","line":25,"column":22,"nodeType":"338","messageId":"339","endLine":25,"endColumn":33},{"ruleId":"360","severity":1,"message":"419","line":43,"column":28,"nodeType":"362","messageId":"363","endLine":43,"endColumn":53,"fix":"420"},{"ruleId":"360","severity":1,"message":"421","line":49,"column":13,"nodeType":"362","messageId":"363","endLine":52,"endColumn":14,"fix":"422"},{"ruleId":"360","severity":1,"message":"423","line":57,"column":24,"nodeType":"362","messageId":"363","endLine":57,"endColumn":38,"fix":"424"},{"ruleId":"374","severity":1,"message":"375","line":141,"column":35,"nodeType":"376","endLine":141,"endColumn":68},{"ruleId":"336","severity":1,"message":"381","line":3,"column":5,"nodeType":"338","messageId":"339","endLine":3,"endColumn":8},{"ruleId":"336","severity":1,"message":"380","line":4,"column":5,"nodeType":"338","messageId":"339","endLine":4,"endColumn":8},{"ruleId":"336","severity":1,"message":"357","line":11,"column":8,"nodeType":"338","messageId":"339","endLine":11,"endColumn":14},{"ruleId":"336","severity":1,"message":"425","line":14,"column":8,"nodeType":"338","messageId":"339","endLine":14,"endColumn":18},{"ruleId":"336","severity":1,"message":"426","line":15,"column":10,"nodeType":"338","messageId":"339","endLine":15,"endColumn":20},{"ruleId":"336","severity":1,"message":"427","line":18,"column":10,"nodeType":"338","messageId":"339","endLine":18,"endColumn":23},{"ruleId":"336","severity":1,"message":"428","line":18,"column":25,"nodeType":"338","messageId":"339","endLine":18,"endColumn":41},{"ruleId":"336","severity":1,"message":"429","line":19,"column":8,"nodeType":"338","messageId":"339","endLine":19,"endColumn":17},{"ruleId":"336","severity":1,"message":"430","line":20,"column":8,"nodeType":"338","messageId":"339","endLine":20,"endColumn":18},{"ruleId":"336","severity":1,"message":"431","line":23,"column":10,"nodeType":"338","messageId":"339","endLine":23,"endColumn":33},{"ruleId":"336","severity":1,"message":"432","line":25,"column":10,"nodeType":"338","messageId":"339","endLine":25,"endColumn":24},{"ruleId":"344","severity":1,"message":"433","line":49,"column":8,"nodeType":"346","endLine":49,"endColumn":10,"suggestions":"434"},{"ruleId":"374","severity":1,"message":"375","line":125,"column":29,"nodeType":"376","endLine":125,"endColumn":64},{"ruleId":"352","severity":1,"message":"353","line":185,"column":30,"nodeType":"354","messageId":"355","endLine":185,"endColumn":32},{"ruleId":"352","severity":1,"message":"353","line":185,"column":71,"nodeType":"354","messageId":"355","endLine":185,"endColumn":73},{"ruleId":"360","severity":1,"message":"365","line":209,"column":18,"nodeType":"362","messageId":"363","endLine":209,"endColumn":37,"fix":"435"},{"ruleId":"336","severity":1,"message":"436","line":212,"column":17,"nodeType":"338","messageId":"339","endLine":212,"endColumn":37},{"ruleId":"374","severity":1,"message":"375","line":350,"column":33,"nodeType":"376","endLine":350,"endColumn":81},{"ruleId":"336","severity":1,"message":"381","line":3,"column":3,"nodeType":"338","messageId":"339","endLine":3,"endColumn":6},{"ruleId":"336","severity":1,"message":"380","line":4,"column":3,"nodeType":"338","messageId":"339","endLine":4,"endColumn":6},{"ruleId":"336","severity":1,"message":"357","line":11,"column":8,"nodeType":"338","messageId":"339","endLine":11,"endColumn":14},{"ruleId":"336","severity":1,"message":"425","line":14,"column":8,"nodeType":"338","messageId":"339","endLine":14,"endColumn":18},{"ruleId":"336","severity":1,"message":"426","line":15,"column":10,"nodeType":"338","messageId":"339","endLine":15,"endColumn":20},{"ruleId":"336","severity":1,"message":"430","line":20,"column":8,"nodeType":"338","messageId":"339","endLine":20,"endColumn":18},{"ruleId":"336","severity":1,"message":"431","line":23,"column":10,"nodeType":"338","messageId":"339","endLine":23,"endColumn":33},{"ruleId":"344","severity":1,"message":"345","line":39,"column":6,"nodeType":"346","endLine":39,"endColumn":8,"suggestions":"437"},{"ruleId":"374","severity":1,"message":"375","line":115,"column":19,"nodeType":"376","endLine":115,"endColumn":54},{"ruleId":"352","severity":1,"message":"353","line":159,"column":21,"nodeType":"354","messageId":"355","endLine":159,"endColumn":23},{"ruleId":"352","severity":1,"message":"353","line":159,"column":62,"nodeType":"354","messageId":"355","endLine":159,"endColumn":64},{"ruleId":"360","severity":1,"message":"438","line":204,"column":20,"nodeType":"362","messageId":"363","endLine":204,"endColumn":37,"fix":"439"},{"ruleId":"374","severity":1,"message":"375","line":282,"column":17,"nodeType":"376","endLine":282,"endColumn":65},{"ruleId":"336","severity":1,"message":"378","line":1,"column":8,"nodeType":"338","messageId":"339","endLine":1,"endColumn":13},{"ruleId":"336","severity":1,"message":"349","line":8,"column":2,"nodeType":"338","messageId":"339","endLine":8,"endColumn":6},{"ruleId":"352","severity":1,"message":"356","line":113,"column":21,"nodeType":"354","messageId":"355","endLine":113,"endColumn":23},{"ruleId":"360","severity":1,"message":"440","line":114,"column":30,"nodeType":"362","messageId":"363","endLine":114,"endColumn":47,"fix":"441"},{"ruleId":"352","severity":1,"message":"356","line":115,"column":28,"nodeType":"354","messageId":"355","endLine":115,"endColumn":30},{"ruleId":"360","severity":1,"message":"442","line":116,"column":30,"nodeType":"362","messageId":"363","endLine":116,"endColumn":49,"fix":"443"},{"ruleId":"352","severity":1,"message":"356","line":117,"column":28,"nodeType":"354","messageId":"355","endLine":117,"endColumn":30},{"ruleId":"360","severity":1,"message":"444","line":118,"column":30,"nodeType":"362","messageId":"363","endLine":118,"endColumn":40,"fix":"445"},{"ruleId":"360","severity":1,"message":"446","line":139,"column":27,"nodeType":"362","messageId":"363","endLine":139,"endColumn":42,"fix":"447"},{"ruleId":"344","severity":1,"message":"358","line":166,"column":17,"nodeType":"359","endLine":190,"endColumn":8},{"ruleId":"344","severity":1,"message":"371","line":200,"column":10,"nodeType":"346","endLine":200,"endColumn":34,"suggestions":"448"},{"ruleId":"344","severity":1,"message":"371","line":212,"column":10,"nodeType":"346","endLine":212,"endColumn":37,"suggestions":"449"},{"ruleId":"352","severity":1,"message":"353","line":228,"column":23,"nodeType":"354","messageId":"355","endLine":228,"endColumn":25},{"ruleId":"374","severity":1,"message":"375","line":242,"column":29,"nodeType":"376","endLine":242,"endColumn":60},{"ruleId":"352","severity":1,"message":"353","line":371,"column":37,"nodeType":"354","messageId":"355","endLine":371,"endColumn":39},{"ruleId":"352","severity":1,"message":"353","line":374,"column":29,"nodeType":"354","messageId":"355","endLine":374,"endColumn":31},{"ruleId":"336","severity":1,"message":"382","line":12,"column":3,"nodeType":"338","messageId":"339","endLine":12,"endColumn":14},{"ruleId":"336","severity":1,"message":"450","line":34,"column":7,"nodeType":"338","messageId":"339","endLine":34,"endColumn":11},{"ruleId":"344","severity":1,"message":"386","line":37,"column":33,"nodeType":"338","endLine":37,"endColumn":44},{"ruleId":"344","severity":1,"message":"345","line":70,"column":6,"nodeType":"346","endLine":70,"endColumn":8,"suggestions":"451"},{"ruleId":"374","severity":1,"message":"375","line":118,"column":19,"nodeType":"376","endLine":118,"endColumn":54},{"ruleId":"352","severity":1,"message":"356","line":262,"column":22,"nodeType":"354","messageId":"355","endLine":262,"endColumn":24},{"ruleId":"352","severity":1,"message":"356","line":272,"column":20,"nodeType":"354","messageId":"355","endLine":272,"endColumn":22},{"ruleId":"352","severity":1,"message":"356","line":283,"column":46,"nodeType":"354","messageId":"355","endLine":283,"endColumn":48},{"ruleId":"344","severity":1,"message":"388","line":310,"column":6,"nodeType":"346","endLine":310,"endColumn":15,"suggestions":"452"},{"ruleId":"390","severity":1,"message":"391","line":312,"column":28,"nodeType":"392","messageId":"355","endLine":312,"endColumn":30},{"ruleId":"374","severity":1,"message":"375","line":367,"column":21,"nodeType":"376","endLine":367,"endColumn":60},{"ruleId":"393","severity":1,"message":"394","line":393,"column":15,"nodeType":"376","endLine":393,"endColumn":39},{"ruleId":"344","severity":1,"message":"395","line":403,"column":6,"nodeType":"346","endLine":403,"endColumn":42,"suggestions":"453"},{"ruleId":"336","severity":1,"message":"382","line":9,"column":3,"nodeType":"338","messageId":"339","endLine":9,"endColumn":14},{"ruleId":"344","severity":1,"message":"386","line":29,"column":33,"nodeType":"338","endLine":29,"endColumn":44},{"ruleId":"344","severity":1,"message":"345","line":54,"column":6,"nodeType":"346","endLine":54,"endColumn":8,"suggestions":"454"},{"ruleId":"374","severity":1,"message":"375","line":90,"column":19,"nodeType":"376","endLine":90,"endColumn":54},{"ruleId":"352","severity":1,"message":"356","line":175,"column":22,"nodeType":"354","messageId":"355","endLine":175,"endColumn":24},{"ruleId":"352","severity":1,"message":"356","line":185,"column":20,"nodeType":"354","messageId":"355","endLine":185,"endColumn":22},{"ruleId":"352","severity":1,"message":"356","line":196,"column":46,"nodeType":"354","messageId":"355","endLine":196,"endColumn":48},{"ruleId":"344","severity":1,"message":"388","line":223,"column":6,"nodeType":"346","endLine":223,"endColumn":15,"suggestions":"455"},{"ruleId":"390","severity":1,"message":"391","line":225,"column":28,"nodeType":"392","messageId":"355","endLine":225,"endColumn":30},{"ruleId":"393","severity":1,"message":"394","line":276,"column":15,"nodeType":"376","endLine":276,"endColumn":39},{"ruleId":"344","severity":1,"message":"456","line":286,"column":6,"nodeType":"346","endLine":286,"endColumn":46,"suggestions":"457"},{"ruleId":"336","severity":1,"message":"426","line":2,"column":19,"nodeType":"338","messageId":"339","endLine":2,"endColumn":29},{"ruleId":"336","severity":1,"message":"458","line":8,"column":8,"nodeType":"338","messageId":"339","endLine":8,"endColumn":17},{"ruleId":"336","severity":1,"message":"459","line":14,"column":9,"nodeType":"338","messageId":"339","endLine":14,"endColumn":23},{"ruleId":"393","severity":1,"message":"394","line":38,"column":15,"nodeType":"376","endLine":38,"endColumn":33},{"ruleId":"374","severity":1,"message":"375","line":75,"column":21,"nodeType":"376","endLine":75,"endColumn":60},{"ruleId":"374","severity":1,"message":"375","line":87,"column":21,"nodeType":"376","endLine":87,"endColumn":60},{"ruleId":"374","severity":1,"message":"375","line":171,"column":29,"nodeType":"376","endLine":171,"endColumn":69},{"ruleId":"393","severity":1,"message":"394","line":217,"column":15,"nodeType":"376","endLine":217,"endColumn":33},{"ruleId":"374","severity":1,"message":"375","line":21,"column":21,"nodeType":"376","endLine":21,"endColumn":64},{"ruleId":"374","severity":1,"message":"375","line":24,"column":21,"nodeType":"376","endLine":24,"endColumn":64},{"ruleId":"374","severity":1,"message":"375","line":27,"column":21,"nodeType":"376","endLine":27,"endColumn":64},{"ruleId":"374","severity":1,"message":"375","line":30,"column":21,"nodeType":"376","endLine":30,"endColumn":64},{"ruleId":"374","severity":1,"message":"375","line":33,"column":21,"nodeType":"376","endLine":33,"endColumn":64},{"ruleId":"374","severity":1,"message":"375","line":36,"column":21,"nodeType":"376","endLine":36,"endColumn":64},"no-unused-vars","'Animal' is defined but never used.","Identifier","unusedVar","'CUSTOMERS_CLEAR' is defined but never used.","'useSelector' is defined but never used.","'print' is assigned a value but never used.","'milkp' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["460"],"'useEffect' is defined but never used.","'Card' is defined but never used.","'Alert' is defined but never used.","'Select' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'moment' is defined but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-useless-computed-key","Unnecessarily computed property [\"type\"] found.","Property","unnecessarilyComputedProperty",{"range":"461","text":"462"},"Unnecessarily computed property [\"status\"] found.",{"range":"463","text":"464"},"Unnecessarily computed property [\"dob\"] found.",{"range":"465","text":"466"},"Unnecessarily computed property [\"image\"] found.",{"range":"467","text":"468"},"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["469"],["470"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'useState' is defined but never used.","'axios' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'FormControl' is defined but never used.","'loginInfo' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'error', 'history', and 'loading'. Either include them or remove the dependency array.",["471"],"React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?",["472"],"React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.",["473"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook React.useMemo has unnecessary dependencies: 'filters' and 'props.animals.animalsData'. Either exclude them or remove the dependency array.",["474"],"'getData' is defined but never used.","React Hook useEffect has missing dependencies: 'id' and 'props.login.loginInfo.token'. Either include them or remove the dependency array.",["475"],"'Button' is defined but never used.","'Modal' is defined but never used.","'Form' is defined but never used.","'BadgeIcon' is defined but never used.","Unnecessarily computed property [\"first_name\"] found.",{"range":"476","text":"477"},"Unnecessarily computed property [\"last_name\"] found.",{"range":"478","text":"479"},"Unnecessarily computed property [\"email\"] found.",{"range":"480","text":"481"},"Unnecessarily computed property [\"old_password\"] found.",{"range":"482","text":"483"},"Unnecessarily computed property [\"password\"] found.",{"range":"484","text":"485"},"Unnecessarily computed property [\"password_confirmation\"] found.",{"range":"486","text":"487"},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'setDisabled' is assigned a value but never used.","Unnecessarily computed property ['record'] found.",{"range":"488","text":"489"},"Unnecessarily computed property [\"record\"] found.",{"range":"490","text":"491"},"Unnecessarily computed property ['date'] found.",{"range":"492","text":"493"},"'DatePicker' is defined but never used.","'useHistory' is defined but never used.","'addTeamMember' is defined but never used.","'deleteTeamMember' is defined but never used.","'TrashIcon' is defined but never used.","'SearchIcon' is defined but never used.","'filterTableSelectStyles' is defined but never used.","'getTeamMembers' is defined but never used.","React Hook useEffect has a missing dependency: 'getWorkersData'. Either include it or remove the dependency array.",["494"],{"range":"495","text":"464"},"'updateWorkerInstance' is defined but never used.",["496"],"Unnecessarily computed property [\"role\"] found.",{"range":"497","text":"498"},"Unnecessarily computed property ['type'] found.",{"range":"499","text":"500"},"Unnecessarily computed property ['status'] found.",{"range":"501","text":"502"},"Unnecessarily computed property ['dob'] found.",{"range":"503","text":"504"},"Unnecessarily computed property ['image'] found.",{"range":"505","text":"506"},["507"],["508"],"'prod' is assigned a value but never used.",["509"],["510"],["511"],["512"],["513"],"React Hook React.useMemo has unnecessary dependencies: 'filters' and 'props.customers.customersData'. Either exclude them or remove the dependency array.",["514"],"'InboxIcon' is defined but never used.","'handleOverlays' is assigned a value but never used.",{"desc":"515","fix":"516"},[3810,3818],"\"type\"",[3891,3901],"\"status\"",[3972,3979],"\"dob\"",[4432,4441],"\"image\"",{"desc":"517","fix":"518"},{"desc":"519","fix":"520"},{"desc":"521","fix":"522"},{"desc":"515","fix":"523"},{"desc":"524","fix":"525"},{"desc":"526","fix":"527"},{"desc":"528","fix":"529"},[3244,3258],"\"first_name\"",[3310,3323],"\"last_name\"",[3375,3384],"\"email\"",[3415,3431],"\"old_password\"",[3462,3474],"\"password\"",[3505,3530],"\"password_confirmation\"",[1444,1454],"'record'",[1594,1604],"\"record\"",[1829,1837],"'date'",{"desc":"530","fix":"531"},[6651,6661],{"desc":"515","fix":"532"},[5761,5769],"\"role\"",[2941,2949],"'type'",[3035,3045],"'status'",[3129,3136],"'dob'",[3704,3713],"'image'",{"desc":"533","fix":"534"},{"desc":"535","fix":"536"},{"desc":"515","fix":"537"},{"desc":"524","fix":"538"},{"desc":"526","fix":"539"},{"desc":"515","fix":"540"},{"desc":"524","fix":"541"},{"desc":"526","fix":"542"},"Update the dependencies array to be: [props]",{"range":"543","text":"544"},"Update the dependencies array to be: [history, props.addAnimalState]",{"range":"545","text":"546"},"Update the dependencies array to be: [history, props.updateAnimalState]",{"range":"547","text":"548"},"Update the dependencies array to be: [dispatch, error, history, loading, userLogin]",{"range":"549","text":"550"},{"range":"551","text":"544"},"Update the dependencies array to be: [data, filters]",{"range":"552","text":"553"},"Update the dependencies array to be: []",{"range":"554","text":"555"},"Update the dependencies array to be: [id, props.login.loginInfo.token]",{"range":"556","text":"557"},"Update the dependencies array to be: [getWorkersData]",{"range":"558","text":"559"},{"range":"560","text":"544"},"Update the dependencies array to be: [history, props.addCustomerState]",{"range":"561","text":"562"},"Update the dependencies array to be: [history, props.updateCustomerState]",{"range":"563","text":"564"},{"range":"565","text":"544"},{"range":"566","text":"553"},{"range":"567","text":"555"},{"range":"568","text":"544"},{"range":"569","text":"553"},{"range":"570","text":"555"},[3683,3685],"[props]",[5409,5431],"[history, props.addAnimalState]",[5730,5755],"[history, props.updateAnimalState]",[1457,1478],"[dispatch, error, history, loading, userLogin]",[1749,1751],[6579,6588],"[data, filters]",[9642,9678],"[]",[402,404],"[id, props.login.loginInfo.token]",[1788,1790],"[getWorkersData]",[1459,1461],[5743,5767],"[history, props.addCustomerState]",[6191,6218],"[history, props.updateCustomerState]",[2180,2182],[8468,8477],[11545,11581],[1702,1704],[6345,6354],[8529,8569]]